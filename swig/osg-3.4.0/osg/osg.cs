//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace osg {

public partial class SwigBoolPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigBoolPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigBoolPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigBoolPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigBoolPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigBoolPointer() : this(OsgModulePINVOKE.new_SwigBoolPointer(), true) {
  }

  public void assign(bool value) {
    OsgModulePINVOKE.SwigBoolPointer_assign(swigCPtr, value);
  }

  public bool value() {
    bool ret = OsgModulePINVOKE.SwigBoolPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_bool cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigBoolPointer_cast(swigCPtr);
    SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
    return ret;
  }

  public static SwigBoolPointer frompointer(SWIGTYPE_p_bool t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigBoolPointer_frompointer(SWIGTYPE_p_bool.getCPtr(t));
    SwigBoolPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigBoolPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigCharPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigCharPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigCharPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigCharPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigCharPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigCharPointer() : this(OsgModulePINVOKE.new_SwigCharPointer(), true) {
  }

  public void assign(char value) {
    OsgModulePINVOKE.SwigCharPointer_assign(swigCPtr, value);
  }

  public char value() {
    char ret = OsgModulePINVOKE.SwigCharPointer_value(swigCPtr);
    return ret;
  }

  public string cast() {
    string ret = OsgModulePINVOKE.SwigCharPointer_cast(swigCPtr);
    return ret;
  }

  public static SwigCharPointer frompointer(string t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigCharPointer_frompointer(t);
    SwigCharPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigCharPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUCharPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUCharPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUCharPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUCharPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUCharPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUCharPointer() : this(OsgModulePINVOKE.new_SwigUCharPointer(), true) {
  }

  public void assign(byte value) {
    OsgModulePINVOKE.SwigUCharPointer_assign(swigCPtr, value);
  }

  public byte value() {
    byte ret = OsgModulePINVOKE.SwigUCharPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUCharPointer_cast(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SwigUCharPointer frompointer(SWIGTYPE_p_unsigned_char t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUCharPointer_frompointer(SWIGTYPE_p_unsigned_char.getCPtr(t));
    SwigUCharPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUCharPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigShortPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigShortPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigShortPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigShortPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigShortPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigShortPointer() : this(OsgModulePINVOKE.new_SwigShortPointer(), true) {
  }

  public void assign(short value) {
    OsgModulePINVOKE.SwigShortPointer_assign(swigCPtr, value);
  }

  public short value() {
    short ret = OsgModulePINVOKE.SwigShortPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_short cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigShortPointer_cast(swigCPtr);
    SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
    return ret;
  }

  public static SwigShortPointer frompointer(SWIGTYPE_p_short t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigShortPointer_frompointer(SWIGTYPE_p_short.getCPtr(t));
    SwigShortPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigShortPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigIntPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigIntPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigIntPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigIntPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigIntPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigIntPointer() : this(OsgModulePINVOKE.new_SwigIntPointer(), true) {
  }

  public void assign(int value) {
    OsgModulePINVOKE.SwigIntPointer_assign(swigCPtr, value);
  }

  public int value() {
    int ret = OsgModulePINVOKE.SwigIntPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_int cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigIntPointer_cast(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static SwigIntPointer frompointer(SWIGTYPE_p_int t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigIntPointer_frompointer(SWIGTYPE_p_int.getCPtr(t));
    SwigIntPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigIntPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigLIntPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigLIntPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLIntPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigLIntPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigLIntPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigLIntPointer() : this(OsgModulePINVOKE.new_SwigLIntPointer(), true) {
  }

  public void assign(int value) {
    OsgModulePINVOKE.SwigLIntPointer_assign(swigCPtr, value);
  }

  public int value() {
    int ret = OsgModulePINVOKE.SwigLIntPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLIntPointer_cast(swigCPtr);
    SWIGTYPE_p_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long(cPtr, false);
    return ret;
  }

  public static SwigLIntPointer frompointer(SWIGTYPE_p_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLIntPointer_frompointer(SWIGTYPE_p_long.getCPtr(t));
    SwigLIntPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigLIntPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigLongPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigLongPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLongPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigLongPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigLongPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigLongPointer() : this(OsgModulePINVOKE.new_SwigLongPointer(), true) {
  }

  public void assign(long value) {
    OsgModulePINVOKE.SwigLongPointer_assign(swigCPtr, value);
  }

  public long value() {
    long ret = OsgModulePINVOKE.SwigLongPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_long_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLongPointer_cast(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public static SwigLongPointer frompointer(SWIGTYPE_p_long_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLongPointer_frompointer(SWIGTYPE_p_long_long.getCPtr(t));
    SwigLongPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigLongPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUShortPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUShortPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUShortPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUShortPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUShortPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUShortPointer() : this(OsgModulePINVOKE.new_SwigUShortPointer(), true) {
  }

  public void assign(ushort value) {
    OsgModulePINVOKE.SwigUShortPointer_assign(swigCPtr, value);
  }

  public ushort value() {
    ushort ret = OsgModulePINVOKE.SwigUShortPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_short cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUShortPointer_cast(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static SwigUShortPointer frompointer(SWIGTYPE_p_unsigned_short t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUShortPointer_frompointer(SWIGTYPE_p_unsigned_short.getCPtr(t));
    SwigUShortPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUShortPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUIntPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUIntPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUIntPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUIntPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUIntPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUIntPointer() : this(OsgModulePINVOKE.new_SwigUIntPointer(), true) {
  }

  public void assign(uint value) {
    OsgModulePINVOKE.SwigUIntPointer_assign(swigCPtr, value);
  }

  public uint value() {
    uint ret = OsgModulePINVOKE.SwigUIntPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_int cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUIntPointer_cast(swigCPtr);
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static SwigUIntPointer frompointer(SWIGTYPE_p_unsigned_int t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUIntPointer_frompointer(SWIGTYPE_p_unsigned_int.getCPtr(t));
    SwigUIntPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUIntPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigULIntPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigULIntPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigULIntPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigULIntPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigULIntPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigULIntPointer() : this(OsgModulePINVOKE.new_SwigULIntPointer(), true) {
  }

  public void assign(uint value) {
    OsgModulePINVOKE.SwigULIntPointer_assign(swigCPtr, value);
  }

  public uint value() {
    uint ret = OsgModulePINVOKE.SwigULIntPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULIntPointer_cast(swigCPtr);
    SWIGTYPE_p_unsigned_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
    return ret;
  }

  public static SwigULIntPointer frompointer(SWIGTYPE_p_unsigned_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULIntPointer_frompointer(SWIGTYPE_p_unsigned_long.getCPtr(t));
    SwigULIntPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigULIntPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigULongPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigULongPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigULongPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigULongPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigULongPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigULongPointer() : this(OsgModulePINVOKE.new_SwigULongPointer(), true) {
  }

  public void assign(ulong value) {
    OsgModulePINVOKE.SwigULongPointer_assign(swigCPtr, value);
  }

  public ulong value() {
    ulong ret = OsgModulePINVOKE.SwigULongPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_unsigned_long_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULongPointer_cast(swigCPtr);
    SWIGTYPE_p_unsigned_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
    return ret;
  }

  public static SwigULongPointer frompointer(SWIGTYPE_p_unsigned_long_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULongPointer_frompointer(SWIGTYPE_p_unsigned_long_long.getCPtr(t));
    SwigULongPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigULongPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigFloatPointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigFloatPointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigFloatPointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigFloatPointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigFloatPointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigFloatPointer() : this(OsgModulePINVOKE.new_SwigFloatPointer(), true) {
  }

  public void assign(float value) {
    OsgModulePINVOKE.SwigFloatPointer_assign(swigCPtr, value);
  }

  public float value() {
    float ret = OsgModulePINVOKE.SwigFloatPointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_float cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigFloatPointer_cast(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SwigFloatPointer frompointer(SWIGTYPE_p_float t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigFloatPointer_frompointer(SWIGTYPE_p_float.getCPtr(t));
    SwigFloatPointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigFloatPointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigDoublePointer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigDoublePointer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigDoublePointer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigDoublePointer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigDoublePointer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigDoublePointer() : this(OsgModulePINVOKE.new_SwigDoublePointer(), true) {
  }

  public void assign(double value) {
    OsgModulePINVOKE.SwigDoublePointer_assign(swigCPtr, value);
  }

  public double value() {
    double ret = OsgModulePINVOKE.SwigDoublePointer_value(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigDoublePointer_cast(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static SwigDoublePointer frompointer(SWIGTYPE_p_double t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigDoublePointer_frompointer(SWIGTYPE_p_double.getCPtr(t));
    SwigDoublePointer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigDoublePointer(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigBoolArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigBoolArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigBoolArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigBoolArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigBoolArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigBoolArray(int nelements) : this(OsgModulePINVOKE.new_SwigBoolArray(nelements), true) {
  }

  public bool getitem(int index) {
    bool ret = OsgModulePINVOKE.SwigBoolArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, bool value) {
    OsgModulePINVOKE.SwigBoolArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_bool cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigBoolArray_cast(swigCPtr);
    SWIGTYPE_p_bool ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
    return ret;
  }

  public static SwigBoolArray frompointer(SWIGTYPE_p_bool t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigBoolArray_frompointer(SWIGTYPE_p_bool.getCPtr(t));
    SwigBoolArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigBoolArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigCharArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigCharArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigCharArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigCharArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigCharArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigCharArray(int nelements) : this(OsgModulePINVOKE.new_SwigCharArray(nelements), true) {
  }

  public char getitem(int index) {
    char ret = OsgModulePINVOKE.SwigCharArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, char value) {
    OsgModulePINVOKE.SwigCharArray_setitem(swigCPtr, index, value);
  }

  public string cast() {
    string ret = OsgModulePINVOKE.SwigCharArray_cast(swigCPtr);
    return ret;
  }

  public static SwigCharArray frompointer(string t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigCharArray_frompointer(t);
    SwigCharArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigCharArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUCharArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUCharArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUCharArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUCharArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUCharArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUCharArray(int nelements) : this(OsgModulePINVOKE.new_SwigUCharArray(nelements), true) {
  }

  public byte getitem(int index) {
    byte ret = OsgModulePINVOKE.SwigUCharArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, byte value) {
    OsgModulePINVOKE.SwigUCharArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_unsigned_char cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUCharArray_cast(swigCPtr);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    return ret;
  }

  public static SwigUCharArray frompointer(SWIGTYPE_p_unsigned_char t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUCharArray_frompointer(SWIGTYPE_p_unsigned_char.getCPtr(t));
    SwigUCharArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUCharArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigShortArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigShortArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigShortArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigShortArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigShortArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigShortArray(int nelements) : this(OsgModulePINVOKE.new_SwigShortArray(nelements), true) {
  }

  public short getitem(int index) {
    short ret = OsgModulePINVOKE.SwigShortArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, short value) {
    OsgModulePINVOKE.SwigShortArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_short cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigShortArray_cast(swigCPtr);
    SWIGTYPE_p_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_short(cPtr, false);
    return ret;
  }

  public static SwigShortArray frompointer(SWIGTYPE_p_short t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigShortArray_frompointer(SWIGTYPE_p_short.getCPtr(t));
    SwigShortArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigShortArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigIntArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigIntArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigIntArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigIntArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigIntArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigIntArray(int nelements) : this(OsgModulePINVOKE.new_SwigIntArray(nelements), true) {
  }

  public int getitem(int index) {
    int ret = OsgModulePINVOKE.SwigIntArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, int value) {
    OsgModulePINVOKE.SwigIntArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_int cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigIntArray_cast(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static SwigIntArray frompointer(SWIGTYPE_p_int t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigIntArray_frompointer(SWIGTYPE_p_int.getCPtr(t));
    SwigIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigIntArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigLIntArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigLIntArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLIntArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigLIntArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigLIntArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigLIntArray(int nelements) : this(OsgModulePINVOKE.new_SwigLIntArray(nelements), true) {
  }

  public int getitem(int index) {
    int ret = OsgModulePINVOKE.SwigLIntArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, int value) {
    OsgModulePINVOKE.SwigLIntArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLIntArray_cast(swigCPtr);
    SWIGTYPE_p_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long(cPtr, false);
    return ret;
  }

  public static SwigLIntArray frompointer(SWIGTYPE_p_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLIntArray_frompointer(SWIGTYPE_p_long.getCPtr(t));
    SwigLIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigLIntArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigLongArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigLongArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigLongArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigLongArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigLongArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigLongArray(int nelements) : this(OsgModulePINVOKE.new_SwigLongArray(nelements), true) {
  }

  public long getitem(int index) {
    long ret = OsgModulePINVOKE.SwigLongArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, long value) {
    OsgModulePINVOKE.SwigLongArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_long_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLongArray_cast(swigCPtr);
    SWIGTYPE_p_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long_long(cPtr, false);
    return ret;
  }

  public static SwigLongArray frompointer(SWIGTYPE_p_long_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigLongArray_frompointer(SWIGTYPE_p_long_long.getCPtr(t));
    SwigLongArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigLongArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUShortArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUShortArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUShortArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUShortArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUShortArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUShortArray(int nelements) : this(OsgModulePINVOKE.new_SwigUShortArray(nelements), true) {
  }

  public ushort getitem(int index) {
    ushort ret = OsgModulePINVOKE.SwigUShortArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, ushort value) {
    OsgModulePINVOKE.SwigUShortArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_unsigned_short cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUShortArray_cast(swigCPtr);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static SwigUShortArray frompointer(SWIGTYPE_p_unsigned_short t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUShortArray_frompointer(SWIGTYPE_p_unsigned_short.getCPtr(t));
    SwigUShortArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUShortArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigUIntArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigUIntArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigUIntArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigUIntArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigUIntArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigUIntArray(int nelements) : this(OsgModulePINVOKE.new_SwigUIntArray(nelements), true) {
  }

  public uint getitem(int index) {
    uint ret = OsgModulePINVOKE.SwigUIntArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, uint value) {
    OsgModulePINVOKE.SwigUIntArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_unsigned_int cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUIntArray_cast(swigCPtr);
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static SwigUIntArray frompointer(SWIGTYPE_p_unsigned_int t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigUIntArray_frompointer(SWIGTYPE_p_unsigned_int.getCPtr(t));
    SwigUIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigUIntArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigULIntArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigULIntArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigULIntArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigULIntArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigULIntArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigULIntArray(int nelements) : this(OsgModulePINVOKE.new_SwigULIntArray(nelements), true) {
  }

  public uint getitem(int index) {
    uint ret = OsgModulePINVOKE.SwigULIntArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, uint value) {
    OsgModulePINVOKE.SwigULIntArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_unsigned_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULIntArray_cast(swigCPtr);
    SWIGTYPE_p_unsigned_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long(cPtr, false);
    return ret;
  }

  public static SwigULIntArray frompointer(SWIGTYPE_p_unsigned_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULIntArray_frompointer(SWIGTYPE_p_unsigned_long.getCPtr(t));
    SwigULIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigULIntArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigULongArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigULongArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigULongArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigULongArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigULongArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigULongArray(int nelements) : this(OsgModulePINVOKE.new_SwigULongArray(nelements), true) {
  }

  public ulong getitem(int index) {
    ulong ret = OsgModulePINVOKE.SwigULongArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, ulong value) {
    OsgModulePINVOKE.SwigULongArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_unsigned_long_long cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULongArray_cast(swigCPtr);
    SWIGTYPE_p_unsigned_long_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_long_long(cPtr, false);
    return ret;
  }

  public static SwigULongArray frompointer(SWIGTYPE_p_unsigned_long_long t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigULongArray_frompointer(SWIGTYPE_p_unsigned_long_long.getCPtr(t));
    SwigULongArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigULongArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigFloatArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigFloatArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigFloatArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigFloatArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigFloatArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigFloatArray(int nelements) : this(OsgModulePINVOKE.new_SwigFloatArray(nelements), true) {
  }

  public float getitem(int index) {
    float ret = OsgModulePINVOKE.SwigFloatArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, float value) {
    OsgModulePINVOKE.SwigFloatArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_float cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigFloatArray_cast(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public static SwigFloatArray frompointer(SWIGTYPE_p_float t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigFloatArray_frompointer(SWIGTYPE_p_float.getCPtr(t));
    SwigFloatArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigFloatArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

public partial class SwigDoubleArray : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public SwigDoubleArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(SwigDoubleArray obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SwigDoubleArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_SwigDoubleArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SwigDoubleArray(int nelements) : this(OsgModulePINVOKE.new_SwigDoubleArray(nelements), true) {
  }

  public double getitem(int index) {
    double ret = OsgModulePINVOKE.SwigDoubleArray_getitem(swigCPtr, index);
    return ret;
  }

  public void setitem(int index, double value) {
    OsgModulePINVOKE.SwigDoubleArray_setitem(swigCPtr, index, value);
  }

  public SWIGTYPE_p_double cast() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigDoubleArray_cast(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static SwigDoubleArray frompointer(SWIGTYPE_p_double t) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.SwigDoubleArray_frompointer(SWIGTYPE_p_double.getCPtr(t));
    SwigDoubleArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new SwigDoubleArray(cPtr, false);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class BoolVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<bool>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public BoolVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(BoolVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BoolVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_BoolVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BoolVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (bool element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public bool this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(bool[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(bool[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, bool[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<bool> global::System.Collections.Generic.IEnumerable<bool>.GetEnumerator() {
    return new BoolVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new BoolVectorEnumerator(this);
  }

  public BoolVectorEnumerator GetEnumerator() {
    return new BoolVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class BoolVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<bool>
  {
    private BoolVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public BoolVectorEnumerator(BoolVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public bool Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (bool)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    OsgModulePINVOKE.BoolVector_Clear(swigCPtr);
  }

  public void Add(bool x) {
    OsgModulePINVOKE.BoolVector_Add(swigCPtr, x);
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.BoolVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = OsgModulePINVOKE.BoolVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    OsgModulePINVOKE.BoolVector_reserve(swigCPtr, n);
  }

  public BoolVector() : this(OsgModulePINVOKE.new_BoolVector__SWIG_0(), true) {
  }

  public BoolVector(BoolVector other) : this(OsgModulePINVOKE.new_BoolVector__SWIG_1(BoolVector.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public BoolVector(int capacity) : this(OsgModulePINVOKE.new_BoolVector__SWIG_2(capacity), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private bool getitemcopy(int index) {
    bool ret = OsgModulePINVOKE.BoolVector_getitemcopy(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool getitem(int index) {
    bool ret = OsgModulePINVOKE.BoolVector_getitem(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, bool val) {
    OsgModulePINVOKE.BoolVector_setitem(swigCPtr, index, val);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(BoolVector values) {
    OsgModulePINVOKE.BoolVector_AddRange(swigCPtr, BoolVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public BoolVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.BoolVector_GetRange(swigCPtr, index, count);
    BoolVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new BoolVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, bool x) {
    OsgModulePINVOKE.BoolVector_Insert(swigCPtr, index, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, BoolVector values) {
    OsgModulePINVOKE.BoolVector_InsertRange(swigCPtr, index, BoolVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    OsgModulePINVOKE.BoolVector_RemoveAt(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    OsgModulePINVOKE.BoolVector_RemoveRange(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public static BoolVector Repeat(bool value, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.BoolVector_Repeat(value, count);
    BoolVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new BoolVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    OsgModulePINVOKE.BoolVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    OsgModulePINVOKE.BoolVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, BoolVector values) {
    OsgModulePINVOKE.BoolVector_SetRange(swigCPtr, index, BoolVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(bool value) {
    bool ret = OsgModulePINVOKE.BoolVector_Contains(swigCPtr, value);
    return ret;
  }

  public int IndexOf(bool value) {
    int ret = OsgModulePINVOKE.BoolVector_IndexOf(swigCPtr, value);
    return ret;
  }

  public int LastIndexOf(bool value) {
    int ret = OsgModulePINVOKE.BoolVector_LastIndexOf(swigCPtr, value);
    return ret;
  }

  public bool Remove(bool value) {
    bool ret = OsgModulePINVOKE.BoolVector_Remove(swigCPtr, value);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class FloatFloatPair : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public FloatFloatPair(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatFloatPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FloatFloatPair() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_FloatFloatPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FloatFloatPair() : this(OsgModulePINVOKE.new_FloatFloatPair__SWIG_0(), true) {
  }

  public FloatFloatPair(float t, float u) : this(OsgModulePINVOKE.new_FloatFloatPair__SWIG_1(t, u), true) {
  }

  public FloatFloatPair(FloatFloatPair p) : this(OsgModulePINVOKE.new_FloatFloatPair__SWIG_2(FloatFloatPair.getCPtr(p)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public float first {
    set {
      OsgModulePINVOKE.FloatFloatPair_first_set(swigCPtr, value);
    } 
    get {
      float ret = OsgModulePINVOKE.FloatFloatPair_first_get(swigCPtr);
      return ret;
    } 
  }

  public float second {
    set {
      OsgModulePINVOKE.FloatFloatPair_second_set(swigCPtr, value);
    } 
    get {
      float ret = OsgModulePINVOKE.FloatFloatPair_second_get(swigCPtr);
      return ret;
    } 
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class FloatFloatPairVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<FloatFloatPair>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public FloatFloatPairVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatFloatPairVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FloatFloatPairVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_FloatFloatPairVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FloatFloatPairVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (FloatFloatPair element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public FloatFloatPair this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(FloatFloatPair[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(FloatFloatPair[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, FloatFloatPair[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<FloatFloatPair> global::System.Collections.Generic.IEnumerable<FloatFloatPair>.GetEnumerator() {
    return new FloatFloatPairVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new FloatFloatPairVectorEnumerator(this);
  }

  public FloatFloatPairVectorEnumerator GetEnumerator() {
    return new FloatFloatPairVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class FloatFloatPairVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<FloatFloatPair>
  {
    private FloatFloatPairVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public FloatFloatPairVectorEnumerator(FloatFloatPairVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public FloatFloatPair Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (FloatFloatPair)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    OsgModulePINVOKE.FloatFloatPairVector_Clear(swigCPtr);
  }

  public void Add(FloatFloatPair x) {
    OsgModulePINVOKE.FloatFloatPairVector_Add(swigCPtr, FloatFloatPair.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.FloatFloatPairVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = OsgModulePINVOKE.FloatFloatPairVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    OsgModulePINVOKE.FloatFloatPairVector_reserve(swigCPtr, n);
  }

  public FloatFloatPairVector() : this(OsgModulePINVOKE.new_FloatFloatPairVector__SWIG_0(), true) {
  }

  public FloatFloatPairVector(FloatFloatPairVector other) : this(OsgModulePINVOKE.new_FloatFloatPairVector__SWIG_1(FloatFloatPairVector.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatFloatPairVector(int capacity) : this(OsgModulePINVOKE.new_FloatFloatPairVector__SWIG_2(capacity), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private FloatFloatPair getitemcopy(int index) {
    FloatFloatPair ret = new FloatFloatPair(OsgModulePINVOKE.FloatFloatPairVector_getitemcopy(swigCPtr, index), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private FloatFloatPair getitem(int index) {
    FloatFloatPair ret = new FloatFloatPair(OsgModulePINVOKE.FloatFloatPairVector_getitem(swigCPtr, index), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, FloatFloatPair val) {
    OsgModulePINVOKE.FloatFloatPairVector_setitem(swigCPtr, index, FloatFloatPair.getCPtr(val));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(FloatFloatPairVector values) {
    OsgModulePINVOKE.FloatFloatPairVector_AddRange(swigCPtr, FloatFloatPairVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatFloatPairVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.FloatFloatPairVector_GetRange(swigCPtr, index, count);
    FloatFloatPairVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatFloatPairVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, FloatFloatPair x) {
    OsgModulePINVOKE.FloatFloatPairVector_Insert(swigCPtr, index, FloatFloatPair.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, FloatFloatPairVector values) {
    OsgModulePINVOKE.FloatFloatPairVector_InsertRange(swigCPtr, index, FloatFloatPairVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    OsgModulePINVOKE.FloatFloatPairVector_RemoveAt(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    OsgModulePINVOKE.FloatFloatPairVector_RemoveRange(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public static FloatFloatPairVector Repeat(FloatFloatPair value, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.FloatFloatPairVector_Repeat(FloatFloatPair.getCPtr(value), count);
    FloatFloatPairVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatFloatPairVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    OsgModulePINVOKE.FloatFloatPairVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    OsgModulePINVOKE.FloatFloatPairVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, FloatFloatPairVector values) {
    OsgModulePINVOKE.FloatFloatPairVector_SetRange(swigCPtr, index, FloatFloatPairVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class UIntUIntMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<uint, uint>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public UIntUIntMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(UIntUIntMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UIntUIntMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_UIntUIntMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public uint this[uint key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(uint key, out uint value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(uint);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

  public global::System.Collections.Generic.ICollection<uint> Keys {
    get {
      global::System.Collections.Generic.ICollection<uint> keys = new global::System.Collections.Generic.List<uint>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<uint> Values {
    get {
      global::System.Collections.Generic.ICollection<uint> vals = new global::System.Collections.Generic.List<uint>();
      foreach (global::System.Collections.Generic.KeyValuePair<uint, uint> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(global::System.Collections.Generic.KeyValuePair<uint, uint> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<uint, uint> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<uint, uint> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, uint>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<uint, uint>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<uint> keyList = new global::System.Collections.Generic.List<uint>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      uint currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<uint, uint>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, uint>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<uint, uint>>.GetEnumerator() {
    return new UIntUIntMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new UIntUIntMapEnumerator(this);
  }

  public UIntUIntMapEnumerator GetEnumerator() {
    return new UIntUIntMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class UIntUIntMapEnumerator : global::System.Collections.IEnumerator, 
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<uint, uint>>
  {
    private UIntUIntMap collectionRef;
    private global::System.Collections.Generic.IList<uint> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public UIntUIntMapEnumerator(UIntUIntMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<uint>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<uint, uint> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<uint, uint>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        uint currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<uint, uint>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }
  

  public UIntUIntMap() : this(OsgModulePINVOKE.new_UIntUIntMap__SWIG_0(), true) {
  }

  public UIntUIntMap(UIntUIntMap other) : this(OsgModulePINVOKE.new_UIntUIntMap__SWIG_1(UIntUIntMap.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.UIntUIntMap_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = OsgModulePINVOKE.UIntUIntMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    OsgModulePINVOKE.UIntUIntMap_Clear(swigCPtr);
  }

  private uint getitem(uint key) {
    uint ret = OsgModulePINVOKE.UIntUIntMap_getitem(swigCPtr, key);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(uint key, uint x) {
    OsgModulePINVOKE.UIntUIntMap_setitem(swigCPtr, key, x);
  }

  public bool ContainsKey(uint key) {
    bool ret = OsgModulePINVOKE.UIntUIntMap_ContainsKey(swigCPtr, key);
    return ret;
  }

  public void Add(uint key, uint val) {
    OsgModulePINVOKE.UIntUIntMap_Add(swigCPtr, key, val);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(uint key) {
    bool ret = OsgModulePINVOKE.UIntUIntMap_Remove(swigCPtr, key);
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = OsgModulePINVOKE.UIntUIntMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private uint get_next_key(global::System.IntPtr swigiterator) {
    uint ret = OsgModulePINVOKE.UIntUIntMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    OsgModulePINVOKE.UIntUIntMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class UIntUIntMapVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<UIntUIntMap>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public UIntUIntMapVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(UIntUIntMapVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UIntUIntMapVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_UIntUIntMapVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UIntUIntMapVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (UIntUIntMap element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public UIntUIntMap this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(UIntUIntMap[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(UIntUIntMap[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, UIntUIntMap[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<UIntUIntMap> global::System.Collections.Generic.IEnumerable<UIntUIntMap>.GetEnumerator() {
    return new UIntUIntMapVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new UIntUIntMapVectorEnumerator(this);
  }

  public UIntUIntMapVectorEnumerator GetEnumerator() {
    return new UIntUIntMapVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class UIntUIntMapVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<UIntUIntMap>
  {
    private UIntUIntMapVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public UIntUIntMapVectorEnumerator(UIntUIntMapVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public UIntUIntMap Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (UIntUIntMap)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    OsgModulePINVOKE.UIntUIntMapVector_Clear(swigCPtr);
  }

  public void Add(UIntUIntMap x) {
    OsgModulePINVOKE.UIntUIntMapVector_Add(swigCPtr, UIntUIntMap.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.UIntUIntMapVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = OsgModulePINVOKE.UIntUIntMapVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    OsgModulePINVOKE.UIntUIntMapVector_reserve(swigCPtr, n);
  }

  public UIntUIntMapVector() : this(OsgModulePINVOKE.new_UIntUIntMapVector__SWIG_0(), true) {
  }

  public UIntUIntMapVector(UIntUIntMapVector other) : this(OsgModulePINVOKE.new_UIntUIntMapVector__SWIG_1(UIntUIntMapVector.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public UIntUIntMapVector(int capacity) : this(OsgModulePINVOKE.new_UIntUIntMapVector__SWIG_2(capacity), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private UIntUIntMap getitemcopy(int index) {
    UIntUIntMap ret = new UIntUIntMap(OsgModulePINVOKE.UIntUIntMapVector_getitemcopy(swigCPtr, index), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private UIntUIntMap getitem(int index) {
    UIntUIntMap ret = new UIntUIntMap(OsgModulePINVOKE.UIntUIntMapVector_getitem(swigCPtr, index), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, UIntUIntMap val) {
    OsgModulePINVOKE.UIntUIntMapVector_setitem(swigCPtr, index, UIntUIntMap.getCPtr(val));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(UIntUIntMapVector values) {
    OsgModulePINVOKE.UIntUIntMapVector_AddRange(swigCPtr, UIntUIntMapVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public UIntUIntMapVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.UIntUIntMapVector_GetRange(swigCPtr, index, count);
    UIntUIntMapVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new UIntUIntMapVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, UIntUIntMap x) {
    OsgModulePINVOKE.UIntUIntMapVector_Insert(swigCPtr, index, UIntUIntMap.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, UIntUIntMapVector values) {
    OsgModulePINVOKE.UIntUIntMapVector_InsertRange(swigCPtr, index, UIntUIntMapVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    OsgModulePINVOKE.UIntUIntMapVector_RemoveAt(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    OsgModulePINVOKE.UIntUIntMapVector_RemoveRange(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public static UIntUIntMapVector Repeat(UIntUIntMap value, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.UIntUIntMapVector_Repeat(UIntUIntMap.getCPtr(value), count);
    UIntUIntMapVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new UIntUIntMapVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    OsgModulePINVOKE.UIntUIntMapVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    OsgModulePINVOKE.UIntUIntMapVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, UIntUIntMapVector values) {
    OsgModulePINVOKE.UIntUIntMapVector_SetRange(swigCPtr, index, UIntUIntMapVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class StringVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public StringVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(StringVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_StringVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StringVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (string element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public string this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(string[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(string[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, string[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<string> global::System.Collections.Generic.IEnumerable<string>.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  public StringVectorEnumerator GetEnumerator() {
    return new StringVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<string>
  {
    private StringVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringVectorEnumerator(StringVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public string Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (string)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    OsgModulePINVOKE.StringVector_Clear(swigCPtr);
  }

  public void Add(string x) {
    OsgModulePINVOKE.StringVector_Add(swigCPtr, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.StringVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = OsgModulePINVOKE.StringVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    OsgModulePINVOKE.StringVector_reserve(swigCPtr, n);
  }

  public StringVector() : this(OsgModulePINVOKE.new_StringVector__SWIG_0(), true) {
  }

  public StringVector(StringVector other) : this(OsgModulePINVOKE.new_StringVector__SWIG_1(StringVector.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector(int capacity) : this(OsgModulePINVOKE.new_StringVector__SWIG_2(capacity), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private string getitemcopy(int index) {
    string ret = OsgModulePINVOKE.StringVector_getitemcopy(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string getitem(int index) {
    string ret = OsgModulePINVOKE.StringVector_getitem(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, string val) {
    OsgModulePINVOKE.StringVector_setitem(swigCPtr, index, val);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(StringVector values) {
    OsgModulePINVOKE.StringVector_AddRange(swigCPtr, StringVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.StringVector_GetRange(swigCPtr, index, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, string x) {
    OsgModulePINVOKE.StringVector_Insert(swigCPtr, index, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, StringVector values) {
    OsgModulePINVOKE.StringVector_InsertRange(swigCPtr, index, StringVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    OsgModulePINVOKE.StringVector_RemoveAt(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    OsgModulePINVOKE.StringVector_RemoveRange(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public static StringVector Repeat(string value, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.StringVector_Repeat(value, count);
    StringVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    OsgModulePINVOKE.StringVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    OsgModulePINVOKE.StringVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, StringVector values) {
    OsgModulePINVOKE.StringVector_SetRange(swigCPtr, index, StringVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string value) {
    bool ret = OsgModulePINVOKE.StringVector_Contains(swigCPtr, value);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int IndexOf(string value) {
    int ret = OsgModulePINVOKE.StringVector_IndexOf(swigCPtr, value);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int LastIndexOf(string value) {
    int ret = OsgModulePINVOKE.StringVector_LastIndexOf(swigCPtr, value);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Remove(string value) {
    bool ret = OsgModulePINVOKE.StringVector_Remove(swigCPtr, value);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class StringDeque : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public StringDeque(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(StringDeque obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringDeque() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_StringDeque(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool empty() {
    bool ret = OsgModulePINVOKE.StringDeque_empty(swigCPtr);
    return ret;
  }

  public StringDeque() : this(OsgModulePINVOKE.new_StringDeque__SWIG_0(), true) {
  }

  public StringDeque(uint size, string value) : this(OsgModulePINVOKE.new_StringDeque__SWIG_1(size, value), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringDeque(uint size) : this(OsgModulePINVOKE.new_StringDeque__SWIG_2(size), true) {
  }

  public StringDeque(StringDeque arg0) : this(OsgModulePINVOKE.new_StringDeque__SWIG_3(StringDeque.getCPtr(arg0)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void assign(uint n, string value) {
    OsgModulePINVOKE.StringDeque_assign(swigCPtr, n, value);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void swap(StringDeque x) {
    OsgModulePINVOKE.StringDeque_swap(swigCPtr, StringDeque.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = OsgModulePINVOKE.StringDeque_size(swigCPtr);
    return ret;
  }

  public uint max_size() {
    uint ret = OsgModulePINVOKE.StringDeque_max_size(swigCPtr);
    return ret;
  }

  public void resize(uint n, string c) {
    OsgModulePINVOKE.StringDeque_resize__SWIG_0(swigCPtr, n, c);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void resize(uint n) {
    OsgModulePINVOKE.StringDeque_resize__SWIG_1(swigCPtr, n);
  }

  public string front() {
    string ret = OsgModulePINVOKE.StringDeque_front(swigCPtr);
    return ret;
  }

  public string back() {
    string ret = OsgModulePINVOKE.StringDeque_back(swigCPtr);
    return ret;
  }

  public void push_front(string x) {
    OsgModulePINVOKE.StringDeque_push_front(swigCPtr, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void push_back(string x) {
    OsgModulePINVOKE.StringDeque_push_back(swigCPtr, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void pop_front() {
    OsgModulePINVOKE.StringDeque_pop_front(swigCPtr);
  }

  public void pop_back() {
    OsgModulePINVOKE.StringDeque_pop_back(swigCPtr);
  }

  public void clear() {
    OsgModulePINVOKE.StringDeque_clear(swigCPtr);
  }

  public string getitem(int i) {
    string ret = OsgModulePINVOKE.StringDeque_getitem(swigCPtr, i);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setitem(int i, string x) {
    OsgModulePINVOKE.StringDeque_setitem(swigCPtr, i, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void delitem(int i) {
    OsgModulePINVOKE.StringDeque_delitem(swigCPtr, i);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringDeque getslice(int i, int j) {
    StringDeque ret = new StringDeque(OsgModulePINVOKE.StringDeque_getslice(swigCPtr, i, j), true);
    return ret;
  }

  public void setslice(int i, int j, StringDeque v) {
    OsgModulePINVOKE.StringDeque_setslice(swigCPtr, i, j, StringDeque.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void delslice(int i, int j) {
    OsgModulePINVOKE.StringDeque_delslice(swigCPtr, i, j);
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class StringStringMap : global::System.IDisposable 
    , global::System.Collections.Generic.IDictionary<string, string>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public StringStringMap(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(StringStringMap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StringStringMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_StringStringMap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }


  public string this[string key] {
    get {
      return getitem(key);
    }

    set {
      setitem(key, value);
    }
  }

  public bool TryGetValue(string key, out string value) {
    if (this.ContainsKey(key)) {
      value = this[key];
      return true;
    }
    value = default(string);
    return false;
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsReadOnly {
    get { 
      return false; 
    }
  }

  public global::System.Collections.Generic.ICollection<string> Keys {
    get {
      global::System.Collections.Generic.ICollection<string> keys = new global::System.Collections.Generic.List<string>();
      int size = this.Count;
      if (size > 0) {
        global::System.IntPtr iter = create_iterator_begin();
        for (int i = 0; i < size; i++) {
          keys.Add(get_next_key(iter));
        }
        destroy_iterator(iter);
      }
      return keys;
    }
  }

  public global::System.Collections.Generic.ICollection<string> Values {
    get {
      global::System.Collections.Generic.ICollection<string> vals = new global::System.Collections.Generic.List<string>();
      foreach (global::System.Collections.Generic.KeyValuePair<string, string> pair in this) {
        vals.Add(pair.Value);
      }
      return vals;
    }
  }
  
  public void Add(global::System.Collections.Generic.KeyValuePair<string, string> item) {
    Add(item.Key, item.Value);
  }

  public bool Remove(global::System.Collections.Generic.KeyValuePair<string, string> item) {
    if (Contains(item)) {
      return Remove(item.Key);
    } else {
      return false;
    }
  }

  public bool Contains(global::System.Collections.Generic.KeyValuePair<string, string> item) {
    if (this[item.Key] == item.Value) {
      return true;
    } else {
      return false;
    }
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, string>[] array) {
    CopyTo(array, 0);
  }

  public void CopyTo(global::System.Collections.Generic.KeyValuePair<string, string>[] array, int arrayIndex) {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (arrayIndex+this.Count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");

    global::System.Collections.Generic.IList<string> keyList = new global::System.Collections.Generic.List<string>(this.Keys);
    for (int i = 0; i < keyList.Count; i++) {
      string currentKey = keyList[i];
      array.SetValue(new global::System.Collections.Generic.KeyValuePair<string, string>(currentKey, this[currentKey]), arrayIndex+i);
    }
  }

  global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, string>> global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<string, string>>.GetEnumerator() {
    return new StringStringMapEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new StringStringMapEnumerator(this);
  }

  public StringStringMapEnumerator GetEnumerator() {
    return new StringStringMapEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class StringStringMapEnumerator : global::System.Collections.IEnumerator, 
      global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, string>>
  {
    private StringStringMap collectionRef;
    private global::System.Collections.Generic.IList<string> keyCollection;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public StringStringMapEnumerator(StringStringMap collection) {
      collectionRef = collection;
      keyCollection = new global::System.Collections.Generic.List<string>(collection.Keys);
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public global::System.Collections.Generic.KeyValuePair<string, string> Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (global::System.Collections.Generic.KeyValuePair<string, string>)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        string currentKey = keyCollection[currentIndex];
        currentObject = new global::System.Collections.Generic.KeyValuePair<string, string>(currentKey, collectionRef[currentKey]);
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
      currentIndex = -1;
      currentObject = null;
    }
  }
  

  public StringStringMap() : this(OsgModulePINVOKE.new_StringStringMap__SWIG_0(), true) {
  }

  public StringStringMap(StringStringMap other) : this(OsgModulePINVOKE.new_StringStringMap__SWIG_1(StringStringMap.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.StringStringMap_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = OsgModulePINVOKE.StringStringMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    OsgModulePINVOKE.StringStringMap_Clear(swigCPtr);
  }

  private string getitem(string key) {
    string ret = OsgModulePINVOKE.StringStringMap_getitem(swigCPtr, key);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string key, string x) {
    OsgModulePINVOKE.StringStringMap_setitem(swigCPtr, key, x);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(string key) {
    bool ret = OsgModulePINVOKE.StringStringMap_ContainsKey(swigCPtr, key);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string key, string val) {
    OsgModulePINVOKE.StringStringMap_Add(swigCPtr, key, val);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string key) {
    bool ret = OsgModulePINVOKE.StringStringMap_Remove(swigCPtr, key);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = OsgModulePINVOKE.StringStringMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private string get_next_key(global::System.IntPtr swigiterator) {
    string ret = OsgModulePINVOKE.StringStringMap_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  private void destroy_iterator(global::System.IntPtr swigiterator) {
    OsgModulePINVOKE.StringStringMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Referenced : global::System.IDisposable {
#region cs_RefUnref -> csbody
  private System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Referenced(System.IntPtr cPtr, bool cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
    this.swigCMemOwn = cMemoryOwn;

    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("Begin Ref {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
        this._ref();
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("End Ref {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
      }
    }
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(Referenced obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  ~Referenced() {
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("Beging UnRef {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
        this._unref();
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("End UnRef {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
      }
    }
  }

  public bool IsLifecycleManaged {
    get { return this.swigCMemOwn; }
    set { this.swigCMemOwn = value; }
  }

  public override bool Equals(object obj) {
    if (!(obj is Referenced)) {
      return false;
    }
    return ((Referenced)obj).swigCPtr.Handle == this.swigCPtr.Handle;
  }

  public override int GetHashCode() {
    return (int)this.swigCPtr.Handle;
  }

  public override string ToString() {
    return "Referenced";
  }
#endregion cs_RefUnref -> csbody

  public virtual void Dispose()  {
    // cs_RefUnref -> csdestruct
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("Begin UnRef {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
        this._unref();
#if OSG_SWIG_DEBUG
        System.Diagnostics.Debug.WriteLine("End UnRef {0} ({1:X})", this.GetType().Name, this.swigCPtr.Handle.ToInt64());
#endif
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      System.GC.SuppressFinalize(this);
    }
  }


  public Referenced() : this(OsgModulePINVOKE.new_Referenced__SWIG_0(), true) {
  }

  public Referenced(bool threadSafeRefUnref) : this(OsgModulePINVOKE.new_Referenced__SWIG_1(threadSafeRefUnref), true) {
  }

  public Referenced(Referenced arg0) : this(OsgModulePINVOKE.new_Referenced__SWIG_2(Referenced.getCPtr(arg0)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setThreadSafeRefUnref(bool threadSafe) {
    OsgModulePINVOKE.Referenced_setThreadSafeRefUnref(swigCPtr, threadSafe);
  }

  public bool getThreadSafeRefUnref() {
    bool ret = OsgModulePINVOKE.Referenced_getThreadSafeRefUnref(swigCPtr);
    return ret;
  }

  public Mutex getRefMutex() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Referenced_getRefMutex(swigCPtr);
    Mutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mutex(cPtr, false);
    return ret;
  }

  public static Mutex getGlobalReferencedMutex() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Referenced_getGlobalReferencedMutex();
    Mutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mutex(cPtr, false);
    return ret;
  }

  public int _ref() {
    int ret = OsgModulePINVOKE.Referenced__ref(swigCPtr);
    return ret;
  }

  public int _unref() {
    int ret = OsgModulePINVOKE.Referenced__unref(swigCPtr);
    return ret;
  }

  public int _unref_nodelete() {
    int ret = OsgModulePINVOKE.Referenced__unref_nodelete(swigCPtr);
    return ret;
  }

  public int referenceCount() {
    int ret = OsgModulePINVOKE.Referenced_referenceCount(swigCPtr);
    return ret;
  }

  public ObserverSet getObserverSet() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Referenced_getObserverSet(swigCPtr);
    ObserverSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObserverSet(cPtr, false);
    return ret;
  }

  public ObserverSet getOrCreateObserverSet() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Referenced_getOrCreateObserverSet(swigCPtr);
    ObserverSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObserverSet(cPtr, false);
    return ret;
  }

  public void addObserver(Observer observer) {
    OsgModulePINVOKE.Referenced_addObserver(swigCPtr, Observer.getCPtr(observer));
  }

  public void removeObserver(Observer observer) {
    OsgModulePINVOKE.Referenced_removeObserver(swigCPtr, Observer.getCPtr(observer));
  }

  public static void setThreadSafeReferenceCounting(bool enableThreadSafeReferenceCounting) {
    OsgModulePINVOKE.Referenced_setThreadSafeReferenceCounting(enableThreadSafeReferenceCounting);
  }

  public static bool getThreadSafeReferenceCounting() {
    bool ret = OsgModulePINVOKE.Referenced_getThreadSafeReferenceCounting();
    return ret;
  }

  public static void setDeleteHandler(SWIGTYPE_p_osg__DeleteHandler handler) {
    OsgModulePINVOKE.Referenced_setDeleteHandler(SWIGTYPE_p_osg__DeleteHandler.getCPtr(handler));
  }

  public static SWIGTYPE_p_osg__DeleteHandler getDeleteHandler() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Referenced_getDeleteHandler();
    SWIGTYPE_p_osg__DeleteHandler ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_osg__DeleteHandler(cPtr, false);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class ReferencedRef : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ReferencedRef(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ReferencedRef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ReferencedRef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_ReferencedRef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ReferencedRef() : this(OsgModulePINVOKE.new_ReferencedRef__SWIG_0(), true) {
  }

  public ReferencedRef(Referenced ptr) : this(OsgModulePINVOKE.new_ReferencedRef__SWIG_1(Referenced.getCPtr(ptr)), true) {
  }

  public ReferencedRef(ReferencedRef rp) : this(OsgModulePINVOKE.new_ReferencedRef__SWIG_2(ReferencedRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public ReferencedRef(ReferencedObserver optr) : this(OsgModulePINVOKE.new_ReferencedRef__SWIG_3(ReferencedObserver.getCPtr(optr)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public Referenced get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ReferencedRef_get(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.ReferencedRef_valid(swigCPtr);
    return ret;
  }

  public Referenced release() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ReferencedRef_release(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public void swap(ReferencedRef rp) {
    OsgModulePINVOKE.ReferencedRef_swap(swigCPtr, ReferencedRef.getCPtr(rp));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(Referenced ptr) {
    OsgModulePINVOKE.ReferencedRef_set(swigCPtr, Referenced.getCPtr(ptr));
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class ReferencedObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ReferencedObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ReferencedObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ReferencedObserver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_ReferencedObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ReferencedObserver() : this(OsgModulePINVOKE.new_ReferencedObserver__SWIG_0(), true) {
  }

  public ReferencedObserver(ReferencedRef rp) : this(OsgModulePINVOKE.new_ReferencedObserver__SWIG_1(ReferencedRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public ReferencedObserver(Referenced rp) : this(OsgModulePINVOKE.new_ReferencedObserver__SWIG_2(Referenced.getCPtr(rp)), true) {
  }

  public ReferencedObserver(ReferencedObserver wp) : this(OsgModulePINVOKE.new_ReferencedObserver__SWIG_3(ReferencedObserver.getCPtr(wp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _lock(ReferencedRef rptr) {
    bool ret = OsgModulePINVOKE.ReferencedObserver__lock(swigCPtr, ReferencedRef.getCPtr(rptr));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Referenced get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ReferencedObserver_get(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.ReferencedObserver_valid(swigCPtr);
    return ret;
  }

}

}
namespace osg {

public enum NotifySeverity {
  ALWAYS = 0,
  FATAL = 1,
  WARN = 2,
  NOTICE = 3,
  INFO = 4,
  DEBUG_INFO = 5,
  DEBUG_FP = 6
}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class NotifyHandler : Referenced {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public NotifyHandler(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.NotifyHandler_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(NotifyHandler obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "NotifyHandler";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public virtual void notify(NotifySeverity severity, string message) {
    OsgModulePINVOKE.NotifyHandler_notify(swigCPtr, (int)severity, message);
  }

  public NotifyHandler() : this(OsgModulePINVOKE.new_NotifyHandler(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("setThreadSafeRefUnref", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNotifyHandler_0(SwigDirectorsetThreadSafeRefUnref);
    if (SwigDerivedClassHasMethod("notify", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateNotifyHandler_1(SwigDirectornotify);
    OsgModulePINVOKE.NotifyHandler_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NotifyHandler));
    return hasDerivedMethod;
  }

  private void SwigDirectorsetThreadSafeRefUnref(bool threadSafe) {
    setThreadSafeRefUnref(threadSafe);
  }

  private void SwigDirectornotify(int severity, string message) {
    notify((NotifySeverity)severity, message);
  }

  public delegate void SwigDelegateNotifyHandler_0(bool threadSafe);
  public delegate void SwigDelegateNotifyHandler_1(int severity, string message);

  private SwigDelegateNotifyHandler_0 swigDelegate0;
  private SwigDelegateNotifyHandler_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(bool) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(NotifySeverity), typeof(string) };
}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class StandardNotifyHandler : NotifyHandler {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public StandardNotifyHandler(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.StandardNotifyHandler_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(StandardNotifyHandler obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "StandardNotifyHandler";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public StandardNotifyHandler() : this(OsgModulePINVOKE.new_StandardNotifyHandler(), true) {
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Observer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Observer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Observer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Observer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Observer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Observer() : this(OsgModulePINVOKE.new_Observer(), true) {
  }

  public virtual void objectDeleted(System.IntPtr arg0) {
    OsgModulePINVOKE.Observer_objectDeleted(swigCPtr, arg0);
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class ObserverSet : Referenced {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public ObserverSet(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.ObserverSet_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(ObserverSet obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "ObserverSet";
  }
#endregion cs_RefUnref -> csbody_derived

  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public ObserverSet(Referenced observedObject) : this(OsgModulePINVOKE.new_ObserverSet(Referenced.getCPtr(observedObject)), true) {
  }

  public Referenced getObserverdObject() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ObserverSet_getObserverdObject(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public Referenced addRefLock() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ObserverSet_addRefLock(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public Mutex getObserverSetMutex() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.ObserverSet_getObserverSetMutex(swigCPtr);
    Mutex ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mutex(cPtr, false);
    return ret;
  }

  public void signalObjectDeleted(System.IntPtr ptr) {
    OsgModulePINVOKE.ObserverSet_signalObjectDeleted(swigCPtr, ptr);
  }

  public SWIGTYPE_p_std__setT_osg__Observer_p_t getObservers() {
    SWIGTYPE_p_std__setT_osg__Observer_p_t ret = new SWIGTYPE_p_std__setT_osg__Observer_p_t(OsgModulePINVOKE.ObserverSet_getObservers(swigCPtr), false);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Timer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Timer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Timer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Timer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Timer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Timer() : this(OsgModulePINVOKE.new_Timer(), true) {
  }

  public static Timer instance() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.Timer_instance();
    Timer ret = (cPtr == global::System.IntPtr.Zero) ? null : new Timer(cPtr, false);
    return ret;
  }

  public ulong tick() {
    ulong ret = OsgModulePINVOKE.Timer_tick(swigCPtr);
    return ret;
  }

  public void setStartTick() {
    OsgModulePINVOKE.Timer_setStartTick__SWIG_0(swigCPtr);
  }

  public void setStartTick(ulong t) {
    OsgModulePINVOKE.Timer_setStartTick__SWIG_1(swigCPtr, t);
  }

  public ulong getStartTick() {
    ulong ret = OsgModulePINVOKE.Timer_getStartTick(swigCPtr);
    return ret;
  }

  public double time_s() {
    double ret = OsgModulePINVOKE.Timer_time_s(swigCPtr);
    return ret;
  }

  public double time_m() {
    double ret = OsgModulePINVOKE.Timer_time_m(swigCPtr);
    return ret;
  }

  public double time_u() {
    double ret = OsgModulePINVOKE.Timer_time_u(swigCPtr);
    return ret;
  }

  public double time_n() {
    double ret = OsgModulePINVOKE.Timer_time_n(swigCPtr);
    return ret;
  }

  public double delta_s(ulong t1, ulong t2) {
    double ret = OsgModulePINVOKE.Timer_delta_s(swigCPtr, t1, t2);
    return ret;
  }

  public double delta_m(ulong t1, ulong t2) {
    double ret = OsgModulePINVOKE.Timer_delta_m(swigCPtr, t1, t2);
    return ret;
  }

  public double delta_u(ulong t1, ulong t2) {
    double ret = OsgModulePINVOKE.Timer_delta_u(swigCPtr, t1, t2);
    return ret;
  }

  public double delta_n(ulong t1, ulong t2) {
    double ret = OsgModulePINVOKE.Timer_delta_n(swigCPtr, t1, t2);
    return ret;
  }

  public double getSecondsPerTick() {
    double ret = OsgModulePINVOKE.Timer_getSecondsPerTick(swigCPtr);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class ElapsedTime : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public ElapsedTime(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(ElapsedTime obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ElapsedTime() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_ElapsedTime(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ElapsedTime(SWIGTYPE_p_double elapsedTime, Timer timer) : this(OsgModulePINVOKE.new_ElapsedTime__SWIG_0(SWIGTYPE_p_double.getCPtr(elapsedTime), Timer.getCPtr(timer)), true) {
  }

  public ElapsedTime(SWIGTYPE_p_double elapsedTime) : this(OsgModulePINVOKE.new_ElapsedTime__SWIG_1(SWIGTYPE_p_double.getCPtr(elapsedTime)), true) {
  }

  public ElapsedTime(Timer timer) : this(OsgModulePINVOKE.new_ElapsedTime__SWIG_2(Timer.getCPtr(timer)), true) {
  }

  public ElapsedTime() : this(OsgModulePINVOKE.new_ElapsedTime__SWIG_3(), true) {
  }

  public void reset() {
    OsgModulePINVOKE.ElapsedTime_reset(swigCPtr);
  }

  public double elapsedTime() {
    double ret = OsgModulePINVOKE.ElapsedTime_elapsedTime(swigCPtr);
    return ret;
  }

  public double elapsedTime_m() {
    double ret = OsgModulePINVOKE.ElapsedTime_elapsedTime_m(swigCPtr);
    return ret;
  }

  public double elapsedTime_u() {
    double ret = OsgModulePINVOKE.ElapsedTime_elapsedTime_u(swigCPtr);
    return ret;
  }

  public double elapsedTime_n() {
    double ret = OsgModulePINVOKE.ElapsedTime_elapsedTime_n(swigCPtr);
    return ret;
  }

  public void finish() {
    OsgModulePINVOKE.ElapsedTime_finish(swigCPtr);
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class CopyOp : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public CopyOp(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(CopyOp obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CopyOp() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_CopyOp(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public CopyOp(uint flags) : this(OsgModulePINVOKE.new_CopyOp__SWIG_0(flags), true) {
  }

  public CopyOp() : this(OsgModulePINVOKE.new_CopyOp__SWIG_1(), true) {
  }

  public void setCopyFlags(uint flags) {
    OsgModulePINVOKE.CopyOp_setCopyFlags(swigCPtr, flags);
  }

  public uint getCopyFlags() {
    uint ret = OsgModulePINVOKE.CopyOp_getCopyFlags(swigCPtr);
    return ret;
  }

  public enum Options {
    SHALLOW_COPY = 0,
    DEEP_COPY_OBJECTS = 1 << 0,
    DEEP_COPY_NODES = 1 << 1,
    DEEP_COPY_DRAWABLES = 1 << 2,
    DEEP_COPY_STATESETS = 1 << 3,
    DEEP_COPY_STATEATTRIBUTES = 1 << 4,
    DEEP_COPY_TEXTURES = 1 << 5,
    DEEP_COPY_IMAGES = 1 << 6,
    DEEP_COPY_ARRAYS = 1 << 7,
    DEEP_COPY_PRIMITIVES = 1 << 8,
    DEEP_COPY_SHAPES = 1 << 9,
    DEEP_COPY_UNIFORMS = 1 << 10,
    DEEP_COPY_CALLBACKS = 1 << 11,
    DEEP_COPY_USERDATA = 1 << 12,
    DEEP_COPY_ALL = 0x7FFFFFFF
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class OSGObject : Referenced {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public OSGObject(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.OSGObject_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(OSGObject obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "OSGObject";
  }
#endregion cs_RefUnref -> csbody_derived

  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public virtual OSGObject cloneType() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_cloneType(swigCPtr);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public virtual OSGObject clone(CopyOp arg0) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_clone(swigCPtr, CopyOp.getCPtr(arg0));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isSameKindAs(OSGObject arg0) {
    bool ret = OsgModulePINVOKE.OSGObject_isSameKindAs(swigCPtr, OSGObject.getCPtr(arg0));
    return ret;
  }

  public virtual string libraryName() {
    string ret = OsgModulePINVOKE.OSGObject_libraryName(swigCPtr);
    return ret;
  }

  public virtual string className() {
    string ret = OsgModulePINVOKE.OSGObject_className(swigCPtr);
    return ret;
  }

  public string getCompoundClassName() {
    string ret = OsgModulePINVOKE.OSGObject_getCompoundClassName(swigCPtr);
    return ret;
  }

  public virtual Node asNode() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_asNode__SWIG_0(swigCPtr);
    Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, false);
    return ret;
  }

  public virtual NodeVisitor asNodeVisitor() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_asNodeVisitor__SWIG_0(swigCPtr);
    NodeVisitor ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeVisitor(cPtr, false);
    return ret;
  }

  public virtual StateAttribute asStateAttribute() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_asStateAttribute__SWIG_0(swigCPtr);
    StateAttribute ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateAttribute(cPtr, false);
    return ret;
  }

  public virtual Uniform asUniform() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_asUniform__SWIG_0(swigCPtr);
    Uniform ret = (cPtr == global::System.IntPtr.Zero) ? null : new Uniform(cPtr, false);
    return ret;
  }

  public virtual void setName(string name) {
    OsgModulePINVOKE.OSGObject_setName(swigCPtr, name);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = OsgModulePINVOKE.OSGObject_getName(swigCPtr);
    return ret;
  }

  public void setDataVariance(OSGObject.DataVariance dv) {
    OsgModulePINVOKE.OSGObject_setDataVariance(swigCPtr, (int)dv);
  }

  public OSGObject.DataVariance getDataVariance() {
    OSGObject.DataVariance ret = (OSGObject.DataVariance)OsgModulePINVOKE.OSGObject_getDataVariance(swigCPtr);
    return ret;
  }

  public virtual void computeDataVariance() {
    OsgModulePINVOKE.OSGObject_computeDataVariance(swigCPtr);
  }

  public void setUserDataContainer(SWIGTYPE_p_osg__UserDataContainer udc) {
    OsgModulePINVOKE.OSGObject_setUserDataContainer(swigCPtr, SWIGTYPE_p_osg__UserDataContainer.getCPtr(udc));
  }

  public SWIGTYPE_p_osg__UserDataContainer getUserDataContainer() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_getUserDataContainer(swigCPtr);
    SWIGTYPE_p_osg__UserDataContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_osg__UserDataContainer(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_osg__UserDataContainer getOrCreateUserDataContainer() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_getOrCreateUserDataContainer(swigCPtr);
    SWIGTYPE_p_osg__UserDataContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_osg__UserDataContainer(cPtr, false);
    return ret;
  }

  public virtual void setUserData(Referenced obj) {
    OsgModulePINVOKE.OSGObject_setUserData(swigCPtr, Referenced.getCPtr(obj));
  }

  public virtual Referenced getUserData() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObject_getUserData(swigCPtr);
    Referenced ret = (cPtr == global::System.IntPtr.Zero) ? null : new Referenced(cPtr, false);
    return ret;
  }

  public virtual void resizeGLObjectBuffers(uint arg0) {
    OsgModulePINVOKE.OSGObject_resizeGLObjectBuffers(swigCPtr, arg0);
  }

  public virtual void releaseGLObjects(State arg0) {
    OsgModulePINVOKE.OSGObject_releaseGLObjects__SWIG_0(swigCPtr, State.getCPtr(arg0));
  }

  public virtual void releaseGLObjects() {
    OsgModulePINVOKE.OSGObject_releaseGLObjects__SWIG_1(swigCPtr);
  }

  public enum DataVariance {
    DYNAMIC,
    STATIC,
    UNSPECIFIED
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class DummyObject : OSGObject {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public DummyObject(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.DummyObject_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(DummyObject obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "DummyObject";
  }
#endregion cs_RefUnref -> csbody_derived

  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public DummyObject() : this(OsgModulePINVOKE.new_DummyObject__SWIG_0(), true) {
  }

  public DummyObject(DummyObject arg0, CopyOp arg1) : this(OsgModulePINVOKE.new_DummyObject__SWIG_1(DummyObject.getCPtr(arg0), CopyOp.getCPtr(arg1)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class OSGObjectRef : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public OSGObjectRef(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(OSGObjectRef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OSGObjectRef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_OSGObjectRef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OSGObjectRef() : this(OsgModulePINVOKE.new_OSGObjectRef__SWIG_0(), true) {
  }

  public OSGObjectRef(OSGObject ptr) : this(OsgModulePINVOKE.new_OSGObjectRef__SWIG_1(OSGObject.getCPtr(ptr)), true) {
  }

  public OSGObjectRef(OSGObjectRef rp) : this(OsgModulePINVOKE.new_OSGObjectRef__SWIG_2(OSGObjectRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public OSGObjectRef(OSGObjectObserver optr) : this(OsgModulePINVOKE.new_OSGObjectRef__SWIG_3(OSGObjectObserver.getCPtr(optr)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public OSGObject get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectRef_get(swigCPtr);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.OSGObjectRef_valid(swigCPtr);
    return ret;
  }

  public OSGObject release() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectRef_release(swigCPtr);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public void swap(OSGObjectRef rp) {
    OsgModulePINVOKE.OSGObjectRef_swap(swigCPtr, OSGObjectRef.getCPtr(rp));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(OSGObject ptr) {
    OsgModulePINVOKE.OSGObjectRef_set(swigCPtr, OSGObject.getCPtr(ptr));
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class OSGObjectObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public OSGObjectObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(OSGObjectObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OSGObjectObserver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_OSGObjectObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OSGObjectObserver() : this(OsgModulePINVOKE.new_OSGObjectObserver__SWIG_0(), true) {
  }

  public OSGObjectObserver(OSGObjectRef rp) : this(OsgModulePINVOKE.new_OSGObjectObserver__SWIG_1(OSGObjectRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public OSGObjectObserver(OSGObject rp) : this(OsgModulePINVOKE.new_OSGObjectObserver__SWIG_2(OSGObject.getCPtr(rp)), true) {
  }

  public OSGObjectObserver(OSGObjectObserver wp) : this(OsgModulePINVOKE.new_OSGObjectObserver__SWIG_3(OSGObjectObserver.getCPtr(wp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _lock(OSGObjectRef rptr) {
    bool ret = OsgModulePINVOKE.OSGObjectObserver__lock(swigCPtr, OSGObjectRef.getCPtr(rptr));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OSGObject get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectObserver_get(swigCPtr);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.OSGObjectObserver_valid(swigCPtr);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class OSGObjectVector : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IList<OSGObject>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public OSGObjectVector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(OSGObjectVector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OSGObjectVector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_OSGObjectVector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public OSGObjectVector(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    foreach (OSGObject element in c) {
      this.Add(element);
    }
  }

  public bool IsFixedSize {
    get {
      return false;
    }
  }

  public bool IsReadOnly {
    get {
      return false;
    }
  }

  public OSGObject this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public int Capacity {
    get {
      return (int)capacity();
    }
    set {
      if (value < size())
        throw new global::System.ArgumentOutOfRangeException("Capacity");
      reserve((uint)value);
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public bool IsSynchronized {
    get {
      return false;
    }
  }

  public void CopyTo(OSGObject[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(OSGObject[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, OSGObject[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<OSGObject> global::System.Collections.Generic.IEnumerable<OSGObject>.GetEnumerator() {
    return new OSGObjectVectorEnumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new OSGObjectVectorEnumerator(this);
  }

  public OSGObjectVectorEnumerator GetEnumerator() {
    return new OSGObjectVectorEnumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class OSGObjectVectorEnumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<OSGObject>
  {
    private OSGObjectVector collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public OSGObjectVectorEnumerator(OSGObjectVector collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public OSGObject Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (OSGObject)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public void Clear() {
    OsgModulePINVOKE.OSGObjectVector_Clear(swigCPtr);
  }

  public void Add(OSGObject x) {
    OsgModulePINVOKE.OSGObjectVector_Add(swigCPtr, OSGObject.getCPtr(x));
  }

  private uint size() {
    uint ret = OsgModulePINVOKE.OSGObjectVector_size(swigCPtr);
    return ret;
  }

  private uint capacity() {
    uint ret = OsgModulePINVOKE.OSGObjectVector_capacity(swigCPtr);
    return ret;
  }

  private void reserve(uint n) {
    OsgModulePINVOKE.OSGObjectVector_reserve(swigCPtr, n);
  }

  public OSGObjectVector() : this(OsgModulePINVOKE.new_OSGObjectVector__SWIG_0(), true) {
  }

  public OSGObjectVector(OSGObjectVector other) : this(OsgModulePINVOKE.new_OSGObjectVector__SWIG_1(OSGObjectVector.getCPtr(other)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public OSGObjectVector(int capacity) : this(OsgModulePINVOKE.new_OSGObjectVector__SWIG_2(capacity), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  private OSGObject getitemcopy(int index) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectVector_getitemcopy(swigCPtr, index);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private OSGObject getitem(int index) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectVector_getitem(swigCPtr, index);
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, OSGObject val) {
    OsgModulePINVOKE.OSGObjectVector_setitem(swigCPtr, index, OSGObject.getCPtr(val));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddRange(OSGObjectVector values) {
    OsgModulePINVOKE.OSGObjectVector_AddRange(swigCPtr, OSGObjectVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public OSGObjectVector GetRange(int index, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectVector_GetRange(swigCPtr, index, count);
    OSGObjectVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObjectVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Insert(int index, OSGObject x) {
    OsgModulePINVOKE.OSGObjectVector_Insert(swigCPtr, index, OSGObject.getCPtr(x));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InsertRange(int index, OSGObjectVector values) {
    OsgModulePINVOKE.OSGObjectVector_InsertRange(swigCPtr, index, OSGObjectVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAt(int index) {
    OsgModulePINVOKE.OSGObjectVector_RemoveAt(swigCPtr, index);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveRange(int index, int count) {
    OsgModulePINVOKE.OSGObjectVector_RemoveRange(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public static OSGObjectVector Repeat(OSGObject value, int count) {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGObjectVector_Repeat(OSGObject.getCPtr(value), count);
    OSGObjectVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObjectVector(cPtr, true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reverse() {
    OsgModulePINVOKE.OSGObjectVector_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    OsgModulePINVOKE.OSGObjectVector_Reverse__SWIG_1(swigCPtr, index, count);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRange(int index, OSGObjectVector values) {
    OsgModulePINVOKE.OSGObjectVector_SetRange(swigCPtr, index, OSGObjectVector.getCPtr(values));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(OSGObject value) {
    bool ret = OsgModulePINVOKE.OSGObjectVector_Contains(swigCPtr, OSGObject.getCPtr(value));
    return ret;
  }

  public int IndexOf(OSGObject value) {
    int ret = OsgModulePINVOKE.OSGObjectVector_IndexOf(swigCPtr, OSGObject.getCPtr(value));
    return ret;
  }

  public int LastIndexOf(OSGObject value) {
    int ret = OsgModulePINVOKE.OSGObjectVector_LastIndexOf(swigCPtr, OSGObject.getCPtr(value));
    return ret;
  }

  public bool Remove(OSGObject value) {
    bool ret = OsgModulePINVOKE.OSGObjectVector_Remove(swigCPtr, OSGObject.getCPtr(value));
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class GLExtensions : Referenced {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public GLExtensions(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.GLExtensions_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(GLExtensions obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "GLExtensions";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public GLExtensions(uint contextID) : this(OsgModulePINVOKE.new_GLExtensions(contextID), true) {
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class OSGCallback : OSGObject {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public OSGCallback(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.OSGCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(OSGCallback obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "OSGCallback";
  }
#endregion cs_RefUnref -> csbody_derived

  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public OSGCallback() : this(OsgModulePINVOKE.new_OSGCallback__SWIG_0(), true) {
  }

  public OSGCallback(OSGCallback cb, CopyOp copyop) : this(OsgModulePINVOKE.new_OSGCallback__SWIG_1(OSGCallback.getCPtr(cb), CopyOp.getCPtr(copyop)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool run(OSGObject arg0, OSGObject data) {
    bool ret = OsgModulePINVOKE.OSGCallback_run(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data));
    return ret;
  }

  public bool traverse(OSGObject arg0, OSGObject data) {
    bool ret = OsgModulePINVOKE.OSGCallback_traverse(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data));
    return ret;
  }

  public void setNestedCallback(OSGCallback cb) {
    OsgModulePINVOKE.OSGCallback_setNestedCallback(swigCPtr, OSGCallback.getCPtr(cb));
  }

  public OSGCallback getNestedCallback() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.OSGCallback_getNestedCallback(swigCPtr);
    OSGCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGCallback(cPtr, false);
    return ret;
  }

  public void addNestedCallback(OSGCallback nc) {
    OsgModulePINVOKE.OSGCallback_addNestedCallback(swigCPtr, OSGCallback.getCPtr(nc));
  }

  public void removeNestedCallback(OSGCallback nc) {
    OsgModulePINVOKE.OSGCallback_removeNestedCallback(swigCPtr, OSGCallback.getCPtr(nc));
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class CallbackObject : OSGCallback {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public CallbackObject(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.CallbackObject_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(CallbackObject obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "CallbackObject";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public CallbackObject() : this(OsgModulePINVOKE.new_CallbackObject__SWIG_0(), true) {
  }

  public CallbackObject(string name) : this(OsgModulePINVOKE.new_CallbackObject__SWIG_1(name), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public CallbackObject(CallbackObject co, CopyOp copyop) : this(OsgModulePINVOKE.new_CallbackObject__SWIG_2(CallbackObject.getCPtr(co), CopyOp.getCPtr(copyop)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public CallbackObject(CallbackObject co) : this(OsgModulePINVOKE.new_CallbackObject__SWIG_3(CallbackObject.getCPtr(co)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual CallbackObject asCallbackObject() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.CallbackObject_asCallbackObject__SWIG_0(swigCPtr);
    CallbackObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CallbackObject(cPtr, false);
    return ret;
  }

  public override bool run(OSGObject arg0, OSGObject data) {
    bool ret = OsgModulePINVOKE.CallbackObject_run__SWIG_0(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data));
    return ret;
  }

  public bool run(OSGObject arg0) {
    bool ret = OsgModulePINVOKE.CallbackObject_run__SWIG_1(swigCPtr, OSGObject.getCPtr(arg0));
    return ret;
  }

  public virtual bool run(OSGObject arg0, SWIGTYPE_p_std__vectorT_osg__ref_ptrT_osg__Object_t_t inputParameters, SWIGTYPE_p_std__vectorT_osg__ref_ptrT_osg__Object_t_t outputParameters) {
    bool ret = OsgModulePINVOKE.CallbackObject_run__SWIG_2(swigCPtr, OSGObject.getCPtr(arg0), SWIGTYPE_p_std__vectorT_osg__ref_ptrT_osg__Object_t_t.getCPtr(inputParameters), SWIGTYPE_p_std__vectorT_osg__ref_ptrT_osg__Object_t_t.getCPtr(outputParameters));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class NodeCallback : OSGCallback {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public NodeCallback(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.NodeCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(NodeCallback obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "NodeCallback";
  }
#endregion cs_RefUnref -> csbody_derived

  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public NodeCallback() : this(OsgModulePINVOKE.new_NodeCallback__SWIG_0(), true) {
    SwigDirectorConnect();
  }

  public NodeCallback(NodeCallback nc, CopyOp copyop) : this(OsgModulePINVOKE.new_NodeCallback__SWIG_1(NodeCallback.getCPtr(nc), CopyOp.getCPtr(copyop)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override OSGObject cloneType() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0) ? OsgModulePINVOKE.NodeCallback_cloneTypeSwigExplicitNodeCallback(swigCPtr) : OsgModulePINVOKE.NodeCallback_cloneType(swigCPtr));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public override OSGObject clone(CopyOp copyop) {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("clone", swigMethodTypes1) ? OsgModulePINVOKE.NodeCallback_cloneSwigExplicitNodeCallback(swigCPtr, CopyOp.getCPtr(copyop)) : OsgModulePINVOKE.NodeCallback_clone(swigCPtr, CopyOp.getCPtr(copyop)));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSameKindAs(OSGObject obj) {
    bool ret = (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2) ? OsgModulePINVOKE.NodeCallback_isSameKindAsSwigExplicitNodeCallback(swigCPtr, OSGObject.getCPtr(obj)) : OsgModulePINVOKE.NodeCallback_isSameKindAs(swigCPtr, OSGObject.getCPtr(obj)));
    return ret;
  }

  public override string libraryName() {
    string ret = (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3) ? OsgModulePINVOKE.NodeCallback_libraryNameSwigExplicitNodeCallback(swigCPtr) : OsgModulePINVOKE.NodeCallback_libraryName(swigCPtr));
    return ret;
  }

  public override string className() {
    string ret = (SwigDerivedClassHasMethod("className", swigMethodTypes4) ? OsgModulePINVOKE.NodeCallback_classNameSwigExplicitNodeCallback(swigCPtr) : OsgModulePINVOKE.NodeCallback_className(swigCPtr));
    return ret;
  }

  public override bool run(OSGObject arg0, OSGObject data) {
    bool ret = (SwigDerivedClassHasMethod("run", swigMethodTypes20) ? OsgModulePINVOKE.NodeCallback_runSwigExplicitNodeCallback(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)) : OsgModulePINVOKE.NodeCallback_run(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)));
    return ret;
  }

  public virtual void Execute(Node node, NodeVisitor nv) {
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21)) OsgModulePINVOKE.NodeCallback_ExecuteSwigExplicitNodeCallback(swigCPtr, Node.getCPtr(node), NodeVisitor.getCPtr(nv)); else OsgModulePINVOKE.NodeCallback_Execute(swigCPtr, Node.getCPtr(node), NodeVisitor.getCPtr(nv));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateNodeCallback_0(SwigDirectorcloneType);
    if (SwigDerivedClassHasMethod("clone", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateNodeCallback_1(SwigDirectorclone);
    if (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateNodeCallback_2(SwigDirectorisSameKindAs);
    if (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateNodeCallback_3(SwigDirectorlibraryName);
    if (SwigDerivedClassHasMethod("className", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateNodeCallback_4(SwigDirectorclassName);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateNodeCallback_5(SwigDirectorasNode__SWIG_0);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateNodeCallback_6(SwigDirectorasNode__SWIG_1);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateNodeCallback_7(SwigDirectorasNodeVisitor__SWIG_0);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateNodeCallback_8(SwigDirectorasNodeVisitor__SWIG_1);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateNodeCallback_9(SwigDirectorasStateAttribute__SWIG_0);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateNodeCallback_10(SwigDirectorasStateAttribute__SWIG_1);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateNodeCallback_11(SwigDirectorasUniform__SWIG_0);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateNodeCallback_12(SwigDirectorasUniform__SWIG_1);
    if (SwigDerivedClassHasMethod("setName", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateNodeCallback_13(SwigDirectorsetName);
    if (SwigDerivedClassHasMethod("computeDataVariance", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateNodeCallback_14(SwigDirectorcomputeDataVariance);
    if (SwigDerivedClassHasMethod("setUserData", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateNodeCallback_15(SwigDirectorsetUserData);
    if (SwigDerivedClassHasMethod("getUserData", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateNodeCallback_16(SwigDirectorgetUserData);
    if (SwigDerivedClassHasMethod("resizeGLObjectBuffers", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateNodeCallback_17(SwigDirectorresizeGLObjectBuffers);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateNodeCallback_18(SwigDirectorreleaseGLObjects__SWIG_0);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateNodeCallback_19(SwigDirectorreleaseGLObjects__SWIG_1);
    if (SwigDerivedClassHasMethod("run", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateNodeCallback_20(SwigDirectorrun);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateNodeCallback_21(SwigDirectorExecute);
    OsgModulePINVOKE.NodeCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(NodeCallback));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorcloneType() {
    return OSGObject.getCPtr(cloneType()).Handle;
  }

  private global::System.IntPtr SwigDirectorclone(global::System.IntPtr copyop) {
    return OSGObject.getCPtr(clone(new CopyOp(copyop, false))).Handle;
  }

  private bool SwigDirectorisSameKindAs(global::System.IntPtr obj) {
    return isSameKindAs((obj == global::System.IntPtr.Zero) ? null : new OSGObject(obj, false));
  }

  private string SwigDirectorlibraryName() {
    return libraryName();
  }

  private string SwigDirectorclassName() {
    return className();
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_0() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_1() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_0() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_1() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_0() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_1() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_0() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_1() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private void SwigDirectorsetName(string name) {
    setName(name);
  }

  private void SwigDirectorcomputeDataVariance() {
    computeDataVariance();
  }

  private void SwigDirectorsetUserData(global::System.IntPtr obj) {
    setUserData((obj == global::System.IntPtr.Zero) ? null : new Referenced(obj, false));
  }

  private global::System.IntPtr SwigDirectorgetUserData() {
    return Referenced.getCPtr(getUserData()).Handle;
  }

  private void SwigDirectorresizeGLObjectBuffers(uint arg0) {
    resizeGLObjectBuffers(arg0);
  }

  private void SwigDirectorreleaseGLObjects__SWIG_0(global::System.IntPtr arg0) {
    releaseGLObjects((arg0 == global::System.IntPtr.Zero) ? null : new State(arg0, false));
  }

  private void SwigDirectorreleaseGLObjects__SWIG_1() {
    releaseGLObjects();
  }

  private bool SwigDirectorrun(global::System.IntPtr arg0, global::System.IntPtr data) {
    return run((arg0 == global::System.IntPtr.Zero) ? null : new OSGObject(arg0, false), (data == global::System.IntPtr.Zero) ? null : new OSGObject(data, false));
  }

  private void SwigDirectorExecute(global::System.IntPtr node, global::System.IntPtr nv) {
    Execute((node == global::System.IntPtr.Zero) ? null : new Node(node, false), (nv == global::System.IntPtr.Zero) ? null : new NodeVisitor(nv, false));
  }

  public delegate global::System.IntPtr SwigDelegateNodeCallback_0();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_1(global::System.IntPtr copyop);
  public delegate bool SwigDelegateNodeCallback_2(global::System.IntPtr obj);
  public delegate string SwigDelegateNodeCallback_3();
  public delegate string SwigDelegateNodeCallback_4();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_5();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_6();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_7();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_8();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_9();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_10();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_11();
  public delegate global::System.IntPtr SwigDelegateNodeCallback_12();
  public delegate void SwigDelegateNodeCallback_13(string name);
  public delegate void SwigDelegateNodeCallback_14();
  public delegate void SwigDelegateNodeCallback_15(global::System.IntPtr obj);
  public delegate global::System.IntPtr SwigDelegateNodeCallback_16();
  public delegate void SwigDelegateNodeCallback_17(uint arg0);
  public delegate void SwigDelegateNodeCallback_18(global::System.IntPtr arg0);
  public delegate void SwigDelegateNodeCallback_19();
  public delegate bool SwigDelegateNodeCallback_20(global::System.IntPtr arg0, global::System.IntPtr data);
  public delegate void SwigDelegateNodeCallback_21(global::System.IntPtr node, global::System.IntPtr nv);

  private SwigDelegateNodeCallback_0 swigDelegate0;
  private SwigDelegateNodeCallback_1 swigDelegate1;
  private SwigDelegateNodeCallback_2 swigDelegate2;
  private SwigDelegateNodeCallback_3 swigDelegate3;
  private SwigDelegateNodeCallback_4 swigDelegate4;
  private SwigDelegateNodeCallback_5 swigDelegate5;
  private SwigDelegateNodeCallback_6 swigDelegate6;
  private SwigDelegateNodeCallback_7 swigDelegate7;
  private SwigDelegateNodeCallback_8 swigDelegate8;
  private SwigDelegateNodeCallback_9 swigDelegate9;
  private SwigDelegateNodeCallback_10 swigDelegate10;
  private SwigDelegateNodeCallback_11 swigDelegate11;
  private SwigDelegateNodeCallback_12 swigDelegate12;
  private SwigDelegateNodeCallback_13 swigDelegate13;
  private SwigDelegateNodeCallback_14 swigDelegate14;
  private SwigDelegateNodeCallback_15 swigDelegate15;
  private SwigDelegateNodeCallback_16 swigDelegate16;
  private SwigDelegateNodeCallback_17 swigDelegate17;
  private SwigDelegateNodeCallback_18 swigDelegate18;
  private SwigDelegateNodeCallback_19 swigDelegate19;
  private SwigDelegateNodeCallback_20 swigDelegate20;
  private SwigDelegateNodeCallback_21 swigDelegate21;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(CopyOp) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(Referenced) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(State) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(OSGObject), typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(Node), typeof(NodeVisitor) };
}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class StateAttributeCallback : OSGCallback {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public StateAttributeCallback(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.StateAttributeCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(StateAttributeCallback obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "StateAttributeCallback";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public StateAttributeCallback() : this(OsgModulePINVOKE.new_StateAttributeCallback__SWIG_0(), true) {
    SwigDirectorConnect();
  }

  public StateAttributeCallback(StateAttributeCallback arg0, CopyOp arg1) : this(OsgModulePINVOKE.new_StateAttributeCallback__SWIG_1(StateAttributeCallback.getCPtr(arg0), CopyOp.getCPtr(arg1)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override OSGObject cloneType() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0) ? OsgModulePINVOKE.StateAttributeCallback_cloneTypeSwigExplicitStateAttributeCallback(swigCPtr) : OsgModulePINVOKE.StateAttributeCallback_cloneType(swigCPtr));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public override OSGObject clone(CopyOp copyop) {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("clone", swigMethodTypes1) ? OsgModulePINVOKE.StateAttributeCallback_cloneSwigExplicitStateAttributeCallback(swigCPtr, CopyOp.getCPtr(copyop)) : OsgModulePINVOKE.StateAttributeCallback_clone(swigCPtr, CopyOp.getCPtr(copyop)));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSameKindAs(OSGObject obj) {
    bool ret = (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2) ? OsgModulePINVOKE.StateAttributeCallback_isSameKindAsSwigExplicitStateAttributeCallback(swigCPtr, OSGObject.getCPtr(obj)) : OsgModulePINVOKE.StateAttributeCallback_isSameKindAs(swigCPtr, OSGObject.getCPtr(obj)));
    return ret;
  }

  public override string libraryName() {
    string ret = (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3) ? OsgModulePINVOKE.StateAttributeCallback_libraryNameSwigExplicitStateAttributeCallback(swigCPtr) : OsgModulePINVOKE.StateAttributeCallback_libraryName(swigCPtr));
    return ret;
  }

  public override string className() {
    string ret = (SwigDerivedClassHasMethod("className", swigMethodTypes4) ? OsgModulePINVOKE.StateAttributeCallback_classNameSwigExplicitStateAttributeCallback(swigCPtr) : OsgModulePINVOKE.StateAttributeCallback_className(swigCPtr));
    return ret;
  }

  public override bool run(OSGObject arg0, OSGObject data) {
    bool ret = (SwigDerivedClassHasMethod("run", swigMethodTypes20) ? OsgModulePINVOKE.StateAttributeCallback_runSwigExplicitStateAttributeCallback(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)) : OsgModulePINVOKE.StateAttributeCallback_run(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)));
    return ret;
  }

  public virtual void Execute(StateAttribute arg0, NodeVisitor arg1) {
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21)) OsgModulePINVOKE.StateAttributeCallback_ExecuteSwigExplicitStateAttributeCallback(swigCPtr, StateAttribute.getCPtr(arg0), NodeVisitor.getCPtr(arg1)); else OsgModulePINVOKE.StateAttributeCallback_Execute(swigCPtr, StateAttribute.getCPtr(arg0), NodeVisitor.getCPtr(arg1));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateStateAttributeCallback_0(SwigDirectorcloneType);
    if (SwigDerivedClassHasMethod("clone", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateStateAttributeCallback_1(SwigDirectorclone);
    if (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateStateAttributeCallback_2(SwigDirectorisSameKindAs);
    if (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateStateAttributeCallback_3(SwigDirectorlibraryName);
    if (SwigDerivedClassHasMethod("className", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateStateAttributeCallback_4(SwigDirectorclassName);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateStateAttributeCallback_5(SwigDirectorasNode__SWIG_0);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateStateAttributeCallback_6(SwigDirectorasNode__SWIG_1);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateStateAttributeCallback_7(SwigDirectorasNodeVisitor__SWIG_0);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateStateAttributeCallback_8(SwigDirectorasNodeVisitor__SWIG_1);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateStateAttributeCallback_9(SwigDirectorasStateAttribute__SWIG_0);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateStateAttributeCallback_10(SwigDirectorasStateAttribute__SWIG_1);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateStateAttributeCallback_11(SwigDirectorasUniform__SWIG_0);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateStateAttributeCallback_12(SwigDirectorasUniform__SWIG_1);
    if (SwigDerivedClassHasMethod("setName", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateStateAttributeCallback_13(SwigDirectorsetName);
    if (SwigDerivedClassHasMethod("computeDataVariance", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateStateAttributeCallback_14(SwigDirectorcomputeDataVariance);
    if (SwigDerivedClassHasMethod("setUserData", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateStateAttributeCallback_15(SwigDirectorsetUserData);
    if (SwigDerivedClassHasMethod("getUserData", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateStateAttributeCallback_16(SwigDirectorgetUserData);
    if (SwigDerivedClassHasMethod("resizeGLObjectBuffers", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateStateAttributeCallback_17(SwigDirectorresizeGLObjectBuffers);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateStateAttributeCallback_18(SwigDirectorreleaseGLObjects__SWIG_0);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateStateAttributeCallback_19(SwigDirectorreleaseGLObjects__SWIG_1);
    if (SwigDerivedClassHasMethod("run", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateStateAttributeCallback_20(SwigDirectorrun);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateStateAttributeCallback_21(SwigDirectorExecute);
    OsgModulePINVOKE.StateAttributeCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(StateAttributeCallback));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorcloneType() {
    return OSGObject.getCPtr(cloneType()).Handle;
  }

  private global::System.IntPtr SwigDirectorclone(global::System.IntPtr copyop) {
    return OSGObject.getCPtr(clone(new CopyOp(copyop, false))).Handle;
  }

  private bool SwigDirectorisSameKindAs(global::System.IntPtr obj) {
    return isSameKindAs((obj == global::System.IntPtr.Zero) ? null : new OSGObject(obj, false));
  }

  private string SwigDirectorlibraryName() {
    return libraryName();
  }

  private string SwigDirectorclassName() {
    return className();
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_0() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_1() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_0() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_1() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_0() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_1() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_0() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_1() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private void SwigDirectorsetName(string name) {
    setName(name);
  }

  private void SwigDirectorcomputeDataVariance() {
    computeDataVariance();
  }

  private void SwigDirectorsetUserData(global::System.IntPtr obj) {
    setUserData((obj == global::System.IntPtr.Zero) ? null : new Referenced(obj, false));
  }

  private global::System.IntPtr SwigDirectorgetUserData() {
    return Referenced.getCPtr(getUserData()).Handle;
  }

  private void SwigDirectorresizeGLObjectBuffers(uint arg0) {
    resizeGLObjectBuffers(arg0);
  }

  private void SwigDirectorreleaseGLObjects__SWIG_0(global::System.IntPtr arg0) {
    releaseGLObjects((arg0 == global::System.IntPtr.Zero) ? null : new State(arg0, false));
  }

  private void SwigDirectorreleaseGLObjects__SWIG_1() {
    releaseGLObjects();
  }

  private bool SwigDirectorrun(global::System.IntPtr arg0, global::System.IntPtr data) {
    return run((arg0 == global::System.IntPtr.Zero) ? null : new OSGObject(arg0, false), (data == global::System.IntPtr.Zero) ? null : new OSGObject(data, false));
  }

  private void SwigDirectorExecute(global::System.IntPtr arg0, global::System.IntPtr arg1) {
    Execute((arg0 == global::System.IntPtr.Zero) ? null : new StateAttribute(arg0, false), (arg1 == global::System.IntPtr.Zero) ? null : new NodeVisitor(arg1, false));
  }

  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_0();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_1(global::System.IntPtr copyop);
  public delegate bool SwigDelegateStateAttributeCallback_2(global::System.IntPtr obj);
  public delegate string SwigDelegateStateAttributeCallback_3();
  public delegate string SwigDelegateStateAttributeCallback_4();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_5();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_6();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_7();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_8();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_9();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_10();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_11();
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_12();
  public delegate void SwigDelegateStateAttributeCallback_13(string name);
  public delegate void SwigDelegateStateAttributeCallback_14();
  public delegate void SwigDelegateStateAttributeCallback_15(global::System.IntPtr obj);
  public delegate global::System.IntPtr SwigDelegateStateAttributeCallback_16();
  public delegate void SwigDelegateStateAttributeCallback_17(uint arg0);
  public delegate void SwigDelegateStateAttributeCallback_18(global::System.IntPtr arg0);
  public delegate void SwigDelegateStateAttributeCallback_19();
  public delegate bool SwigDelegateStateAttributeCallback_20(global::System.IntPtr arg0, global::System.IntPtr data);
  public delegate void SwigDelegateStateAttributeCallback_21(global::System.IntPtr arg0, global::System.IntPtr arg1);

  private SwigDelegateStateAttributeCallback_0 swigDelegate0;
  private SwigDelegateStateAttributeCallback_1 swigDelegate1;
  private SwigDelegateStateAttributeCallback_2 swigDelegate2;
  private SwigDelegateStateAttributeCallback_3 swigDelegate3;
  private SwigDelegateStateAttributeCallback_4 swigDelegate4;
  private SwigDelegateStateAttributeCallback_5 swigDelegate5;
  private SwigDelegateStateAttributeCallback_6 swigDelegate6;
  private SwigDelegateStateAttributeCallback_7 swigDelegate7;
  private SwigDelegateStateAttributeCallback_8 swigDelegate8;
  private SwigDelegateStateAttributeCallback_9 swigDelegate9;
  private SwigDelegateStateAttributeCallback_10 swigDelegate10;
  private SwigDelegateStateAttributeCallback_11 swigDelegate11;
  private SwigDelegateStateAttributeCallback_12 swigDelegate12;
  private SwigDelegateStateAttributeCallback_13 swigDelegate13;
  private SwigDelegateStateAttributeCallback_14 swigDelegate14;
  private SwigDelegateStateAttributeCallback_15 swigDelegate15;
  private SwigDelegateStateAttributeCallback_16 swigDelegate16;
  private SwigDelegateStateAttributeCallback_17 swigDelegate17;
  private SwigDelegateStateAttributeCallback_18 swigDelegate18;
  private SwigDelegateStateAttributeCallback_19 swigDelegate19;
  private SwigDelegateStateAttributeCallback_20 swigDelegate20;
  private SwigDelegateStateAttributeCallback_21 swigDelegate21;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(CopyOp) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(Referenced) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(State) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(OSGObject), typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(StateAttribute), typeof(NodeVisitor) };
}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class UniformCallback : OSGCallback {
#region cs_RefUnref -> csbody_derived
  private System.Runtime.InteropServices.HandleRef swigCPtr;

  public UniformCallback(System.IntPtr cPtr, bool cMemoryOwn) : base(OsgModulePINVOKE.UniformCallback_SWIGUpcast(cPtr), cMemoryOwn) {
    this.swigCPtr = new System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static System.Runtime.InteropServices.HandleRef getCPtr(UniformCallback obj) {
    return (obj != null) ? obj.swigCPtr : new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
  }

  public override string ToString() {
    return "UniformCallback";
  }
#endregion cs_RefUnref -> csbody_derived


  public override void Dispose()  {
    // cs_RefUnref -> csdestruct_derived
    lock(this) {
      if (this.swigCPtr.Handle != System.IntPtr.Zero) {
        this.swigCPtr = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
      }
      base.Dispose();
    }
  }


  public UniformCallback() : this(OsgModulePINVOKE.new_UniformCallback__SWIG_0(), true) {
    SwigDirectorConnect();
  }

  public UniformCallback(UniformCallback arg0, CopyOp arg1) : this(OsgModulePINVOKE.new_UniformCallback__SWIG_1(UniformCallback.getCPtr(arg0), CopyOp.getCPtr(arg1)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override OSGObject cloneType() {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0) ? OsgModulePINVOKE.UniformCallback_cloneTypeSwigExplicitUniformCallback(swigCPtr) : OsgModulePINVOKE.UniformCallback_cloneType(swigCPtr));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    return ret;
  }

  public override OSGObject clone(CopyOp copyop) {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("clone", swigMethodTypes1) ? OsgModulePINVOKE.UniformCallback_cloneSwigExplicitUniformCallback(swigCPtr, CopyOp.getCPtr(copyop)) : OsgModulePINVOKE.UniformCallback_clone(swigCPtr, CopyOp.getCPtr(copyop)));
    OSGObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new OSGObject(cPtr, false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSameKindAs(OSGObject obj) {
    bool ret = (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2) ? OsgModulePINVOKE.UniformCallback_isSameKindAsSwigExplicitUniformCallback(swigCPtr, OSGObject.getCPtr(obj)) : OsgModulePINVOKE.UniformCallback_isSameKindAs(swigCPtr, OSGObject.getCPtr(obj)));
    return ret;
  }

  public override string libraryName() {
    string ret = (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3) ? OsgModulePINVOKE.UniformCallback_libraryNameSwigExplicitUniformCallback(swigCPtr) : OsgModulePINVOKE.UniformCallback_libraryName(swigCPtr));
    return ret;
  }

  public override string className() {
    string ret = (SwigDerivedClassHasMethod("className", swigMethodTypes4) ? OsgModulePINVOKE.UniformCallback_classNameSwigExplicitUniformCallback(swigCPtr) : OsgModulePINVOKE.UniformCallback_className(swigCPtr));
    return ret;
  }

  public override bool run(OSGObject arg0, OSGObject data) {
    bool ret = (SwigDerivedClassHasMethod("run", swigMethodTypes20) ? OsgModulePINVOKE.UniformCallback_runSwigExplicitUniformCallback(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)) : OsgModulePINVOKE.UniformCallback_run(swigCPtr, OSGObject.getCPtr(arg0), OSGObject.getCPtr(data)));
    return ret;
  }

  public virtual void Execute(Uniform arg0, NodeVisitor arg1) {
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21)) OsgModulePINVOKE.UniformCallback_ExecuteSwigExplicitUniformCallback(swigCPtr, Uniform.getCPtr(arg0), NodeVisitor.getCPtr(arg1)); else OsgModulePINVOKE.UniformCallback_Execute(swigCPtr, Uniform.getCPtr(arg0), NodeVisitor.getCPtr(arg1));
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("cloneType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateUniformCallback_0(SwigDirectorcloneType);
    if (SwigDerivedClassHasMethod("clone", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateUniformCallback_1(SwigDirectorclone);
    if (SwigDerivedClassHasMethod("isSameKindAs", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateUniformCallback_2(SwigDirectorisSameKindAs);
    if (SwigDerivedClassHasMethod("libraryName", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateUniformCallback_3(SwigDirectorlibraryName);
    if (SwigDerivedClassHasMethod("className", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateUniformCallback_4(SwigDirectorclassName);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateUniformCallback_5(SwigDirectorasNode__SWIG_0);
    if (SwigDerivedClassHasMethod("asNode", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateUniformCallback_6(SwigDirectorasNode__SWIG_1);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateUniformCallback_7(SwigDirectorasNodeVisitor__SWIG_0);
    if (SwigDerivedClassHasMethod("asNodeVisitor", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateUniformCallback_8(SwigDirectorasNodeVisitor__SWIG_1);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateUniformCallback_9(SwigDirectorasStateAttribute__SWIG_0);
    if (SwigDerivedClassHasMethod("asStateAttribute", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateUniformCallback_10(SwigDirectorasStateAttribute__SWIG_1);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateUniformCallback_11(SwigDirectorasUniform__SWIG_0);
    if (SwigDerivedClassHasMethod("asUniform", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateUniformCallback_12(SwigDirectorasUniform__SWIG_1);
    if (SwigDerivedClassHasMethod("setName", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateUniformCallback_13(SwigDirectorsetName);
    if (SwigDerivedClassHasMethod("computeDataVariance", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateUniformCallback_14(SwigDirectorcomputeDataVariance);
    if (SwigDerivedClassHasMethod("setUserData", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateUniformCallback_15(SwigDirectorsetUserData);
    if (SwigDerivedClassHasMethod("getUserData", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateUniformCallback_16(SwigDirectorgetUserData);
    if (SwigDerivedClassHasMethod("resizeGLObjectBuffers", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateUniformCallback_17(SwigDirectorresizeGLObjectBuffers);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateUniformCallback_18(SwigDirectorreleaseGLObjects__SWIG_0);
    if (SwigDerivedClassHasMethod("releaseGLObjects", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateUniformCallback_19(SwigDirectorreleaseGLObjects__SWIG_1);
    if (SwigDerivedClassHasMethod("run", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateUniformCallback_20(SwigDirectorrun);
    if (SwigDerivedClassHasMethod("Execute", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateUniformCallback_21(SwigDirectorExecute);
    OsgModulePINVOKE.UniformCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(UniformCallback));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorcloneType() {
    return OSGObject.getCPtr(cloneType()).Handle;
  }

  private global::System.IntPtr SwigDirectorclone(global::System.IntPtr copyop) {
    return OSGObject.getCPtr(clone(new CopyOp(copyop, false))).Handle;
  }

  private bool SwigDirectorisSameKindAs(global::System.IntPtr obj) {
    return isSameKindAs((obj == global::System.IntPtr.Zero) ? null : new OSGObject(obj, false));
  }

  private string SwigDirectorlibraryName() {
    return libraryName();
  }

  private string SwigDirectorclassName() {
    return className();
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_0() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNode__SWIG_1() {
    return Node.getCPtr(asNode()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_0() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasNodeVisitor__SWIG_1() {
    return NodeVisitor.getCPtr(asNodeVisitor()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_0() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasStateAttribute__SWIG_1() {
    return StateAttribute.getCPtr(asStateAttribute()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_0() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private global::System.IntPtr SwigDirectorasUniform__SWIG_1() {
    return Uniform.getCPtr(asUniform()).Handle;
  }

  private void SwigDirectorsetName(string name) {
    setName(name);
  }

  private void SwigDirectorcomputeDataVariance() {
    computeDataVariance();
  }

  private void SwigDirectorsetUserData(global::System.IntPtr obj) {
    setUserData((obj == global::System.IntPtr.Zero) ? null : new Referenced(obj, false));
  }

  private global::System.IntPtr SwigDirectorgetUserData() {
    return Referenced.getCPtr(getUserData()).Handle;
  }

  private void SwigDirectorresizeGLObjectBuffers(uint arg0) {
    resizeGLObjectBuffers(arg0);
  }

  private void SwigDirectorreleaseGLObjects__SWIG_0(global::System.IntPtr arg0) {
    releaseGLObjects((arg0 == global::System.IntPtr.Zero) ? null : new State(arg0, false));
  }

  private void SwigDirectorreleaseGLObjects__SWIG_1() {
    releaseGLObjects();
  }

  private bool SwigDirectorrun(global::System.IntPtr arg0, global::System.IntPtr data) {
    return run((arg0 == global::System.IntPtr.Zero) ? null : new OSGObject(arg0, false), (data == global::System.IntPtr.Zero) ? null : new OSGObject(data, false));
  }

  private void SwigDirectorExecute(global::System.IntPtr arg0, global::System.IntPtr arg1) {
    Execute((arg0 == global::System.IntPtr.Zero) ? null : new Uniform(arg0, false), (arg1 == global::System.IntPtr.Zero) ? null : new NodeVisitor(arg1, false));
  }

  public delegate global::System.IntPtr SwigDelegateUniformCallback_0();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_1(global::System.IntPtr copyop);
  public delegate bool SwigDelegateUniformCallback_2(global::System.IntPtr obj);
  public delegate string SwigDelegateUniformCallback_3();
  public delegate string SwigDelegateUniformCallback_4();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_5();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_6();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_7();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_8();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_9();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_10();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_11();
  public delegate global::System.IntPtr SwigDelegateUniformCallback_12();
  public delegate void SwigDelegateUniformCallback_13(string name);
  public delegate void SwigDelegateUniformCallback_14();
  public delegate void SwigDelegateUniformCallback_15(global::System.IntPtr obj);
  public delegate global::System.IntPtr SwigDelegateUniformCallback_16();
  public delegate void SwigDelegateUniformCallback_17(uint arg0);
  public delegate void SwigDelegateUniformCallback_18(global::System.IntPtr arg0);
  public delegate void SwigDelegateUniformCallback_19();
  public delegate bool SwigDelegateUniformCallback_20(global::System.IntPtr arg0, global::System.IntPtr data);
  public delegate void SwigDelegateUniformCallback_21(global::System.IntPtr arg0, global::System.IntPtr arg1);

  private SwigDelegateUniformCallback_0 swigDelegate0;
  private SwigDelegateUniformCallback_1 swigDelegate1;
  private SwigDelegateUniformCallback_2 swigDelegate2;
  private SwigDelegateUniformCallback_3 swigDelegate3;
  private SwigDelegateUniformCallback_4 swigDelegate4;
  private SwigDelegateUniformCallback_5 swigDelegate5;
  private SwigDelegateUniformCallback_6 swigDelegate6;
  private SwigDelegateUniformCallback_7 swigDelegate7;
  private SwigDelegateUniformCallback_8 swigDelegate8;
  private SwigDelegateUniformCallback_9 swigDelegate9;
  private SwigDelegateUniformCallback_10 swigDelegate10;
  private SwigDelegateUniformCallback_11 swigDelegate11;
  private SwigDelegateUniformCallback_12 swigDelegate12;
  private SwigDelegateUniformCallback_13 swigDelegate13;
  private SwigDelegateUniformCallback_14 swigDelegate14;
  private SwigDelegateUniformCallback_15 swigDelegate15;
  private SwigDelegateUniformCallback_16 swigDelegate16;
  private SwigDelegateUniformCallback_17 swigDelegate17;
  private SwigDelegateUniformCallback_18 swigDelegate18;
  private SwigDelegateUniformCallback_19 swigDelegate19;
  private SwigDelegateUniformCallback_20 swigDelegate20;
  private SwigDelegateUniformCallback_21 swigDelegate21;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(CopyOp) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(Referenced) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(uint) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(State) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(OSGObject), typeof(OSGObject) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(Uniform), typeof(NodeVisitor) };
}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class NodeCallbackRef : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NodeCallbackRef(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NodeCallbackRef obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NodeCallbackRef() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_NodeCallbackRef(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NodeCallbackRef() : this(OsgModulePINVOKE.new_NodeCallbackRef__SWIG_0(), true) {
  }

  public NodeCallbackRef(NodeCallback ptr) : this(OsgModulePINVOKE.new_NodeCallbackRef__SWIG_1(NodeCallback.getCPtr(ptr)), true) {
  }

  public NodeCallbackRef(NodeCallbackRef rp) : this(OsgModulePINVOKE.new_NodeCallbackRef__SWIG_2(NodeCallbackRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodeCallbackRef(NodeCallbackObserver optr) : this(OsgModulePINVOKE.new_NodeCallbackRef__SWIG_3(NodeCallbackObserver.getCPtr(optr)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodeCallback get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.NodeCallbackRef_get(swigCPtr);
    NodeCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeCallback(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.NodeCallbackRef_valid(swigCPtr);
    return ret;
  }

  public NodeCallback release() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.NodeCallbackRef_release(swigCPtr);
    NodeCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeCallback(cPtr, false);
    return ret;
  }

  public void swap(NodeCallbackRef rp) {
    OsgModulePINVOKE.NodeCallbackRef_swap(swigCPtr, NodeCallbackRef.getCPtr(rp));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public void set(NodeCallback ptr) {
    OsgModulePINVOKE.NodeCallbackRef_set(swigCPtr, NodeCallback.getCPtr(ptr));
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class NodeCallbackObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public NodeCallbackObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(NodeCallbackObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NodeCallbackObserver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_NodeCallbackObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public NodeCallbackObserver() : this(OsgModulePINVOKE.new_NodeCallbackObserver__SWIG_0(), true) {
  }

  public NodeCallbackObserver(NodeCallbackRef rp) : this(OsgModulePINVOKE.new_NodeCallbackObserver__SWIG_1(NodeCallbackRef.getCPtr(rp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public NodeCallbackObserver(NodeCallback rp) : this(OsgModulePINVOKE.new_NodeCallbackObserver__SWIG_2(NodeCallback.getCPtr(rp)), true) {
  }

  public NodeCallbackObserver(NodeCallbackObserver wp) : this(OsgModulePINVOKE.new_NodeCallbackObserver__SWIG_3(NodeCallbackObserver.getCPtr(wp)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool _lock(NodeCallbackRef rptr) {
    bool ret = OsgModulePINVOKE.NodeCallbackObserver__lock(swigCPtr, NodeCallbackRef.getCPtr(rptr));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NodeCallback get() {
    global::System.IntPtr cPtr = OsgModulePINVOKE.NodeCallbackObserver_get(swigCPtr);
    NodeCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new NodeCallback(cPtr, false);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.NodeCallbackObserver_valid(swigCPtr);
    return ret;
  }

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec2b : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec2b(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec2b obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec2b() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec2b(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec2b() : this(OsgModulePINVOKE.new_Vec2b__SWIG_0(), true) {
  }

  public Vec2b(sbyte r, sbyte g) : this(OsgModulePINVOKE.new_Vec2b__SWIG_1(r, g), true) {
  }

  public bool Eq(Vec2b v) {
    bool ret = OsgModulePINVOKE.Vec2b_Eq(swigCPtr, Vec2b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec2b v) {
    bool ret = OsgModulePINVOKE.Vec2b_NotEq(swigCPtr, Vec2b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec2b v) {
    bool ret = OsgModulePINVOKE.Vec2b_Lt(swigCPtr, Vec2b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(sbyte x, sbyte y) {
    OsgModulePINVOKE.Vec2b_set__SWIG_0(swigCPtr, x, y);
  }

  public void set(Vec2b rhs) {
    OsgModulePINVOKE.Vec2b_set__SWIG_1(swigCPtr, Vec2b.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public sbyte x() {
    sbyte ret = OsgModulePINVOKE.Vec2b_x(swigCPtr);
    return ret;
  }

  public sbyte y() {
    sbyte ret = OsgModulePINVOKE.Vec2b_y(swigCPtr);
    return ret;
  }

  public sbyte r() {
    sbyte ret = OsgModulePINVOKE.Vec2b_r(swigCPtr);
    return ret;
  }

  public sbyte g() {
    sbyte ret = OsgModulePINVOKE.Vec2b_g(swigCPtr);
    return ret;
  }

  public Vec2b Mul(float rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_Mul(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2b MulAssign(float rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2b Div(float rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2b DivAssign(float rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2b Sum(Vec2b rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_Sum(swigCPtr, Vec2b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2b SumAssign(Vec2b rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_SumAssign(swigCPtr, Vec2b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2b Sub(Vec2b rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_Sub(swigCPtr, Vec2b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2b SubAssign(Vec2b rhs) {
    Vec2b ret = new Vec2b(OsgModulePINVOKE.Vec2b_SubAssign(swigCPtr, Vec2b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public sbyte get(int i) {
    sbyte ret = OsgModulePINVOKE.Vec2b_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, sbyte value) {
    OsgModulePINVOKE.Vec2b_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec2b_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec3b : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec3b(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec3b obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec3b() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec3b(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec3b() : this(OsgModulePINVOKE.new_Vec3b__SWIG_0(), true) {
  }

  public Vec3b(sbyte r, sbyte g, sbyte b) : this(OsgModulePINVOKE.new_Vec3b__SWIG_1(r, g, b), true) {
  }

  public bool Eq(Vec3b v) {
    bool ret = OsgModulePINVOKE.Vec3b_Eq(swigCPtr, Vec3b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec3b v) {
    bool ret = OsgModulePINVOKE.Vec3b_NotEq(swigCPtr, Vec3b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec3b v) {
    bool ret = OsgModulePINVOKE.Vec3b_Lt(swigCPtr, Vec3b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(sbyte r, sbyte g, sbyte b) {
    OsgModulePINVOKE.Vec3b_set__SWIG_0(swigCPtr, r, g, b);
  }

  public void set(Vec3b rhs) {
    OsgModulePINVOKE.Vec3b_set__SWIG_1(swigCPtr, Vec3b.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public sbyte x() {
    sbyte ret = OsgModulePINVOKE.Vec3b_x(swigCPtr);
    return ret;
  }

  public sbyte y() {
    sbyte ret = OsgModulePINVOKE.Vec3b_y(swigCPtr);
    return ret;
  }

  public sbyte z() {
    sbyte ret = OsgModulePINVOKE.Vec3b_z(swigCPtr);
    return ret;
  }

  public sbyte r() {
    sbyte ret = OsgModulePINVOKE.Vec3b_r(swigCPtr);
    return ret;
  }

  public sbyte g() {
    sbyte ret = OsgModulePINVOKE.Vec3b_g(swigCPtr);
    return ret;
  }

  public sbyte b() {
    sbyte ret = OsgModulePINVOKE.Vec3b_b(swigCPtr);
    return ret;
  }

  public Vec3b Mul(float rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_Mul(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3b MulAssign(float rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3b Div(float rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3b DivAssign(float rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3b Sum(Vec3b rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_Sum(swigCPtr, Vec3b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3b SumAssign(Vec3b rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_SumAssign(swigCPtr, Vec3b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3b Sub(Vec3b rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_Sub(swigCPtr, Vec3b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3b SubAssign(Vec3b rhs) {
    Vec3b ret = new Vec3b(OsgModulePINVOKE.Vec3b_SubAssign(swigCPtr, Vec3b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public sbyte get(int i) {
    sbyte ret = OsgModulePINVOKE.Vec3b_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, sbyte value) {
    OsgModulePINVOKE.Vec3b_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec3b_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec4b : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec4b(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec4b obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec4b() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec4b(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec4b() : this(OsgModulePINVOKE.new_Vec4b__SWIG_0(), true) {
  }

  public Vec4b(sbyte x, sbyte y, sbyte z, sbyte w) : this(OsgModulePINVOKE.new_Vec4b__SWIG_1(x, y, z, w), true) {
  }

  public bool Eq(Vec4b v) {
    bool ret = OsgModulePINVOKE.Vec4b_Eq(swigCPtr, Vec4b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec4b v) {
    bool ret = OsgModulePINVOKE.Vec4b_NotEq(swigCPtr, Vec4b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec4b v) {
    bool ret = OsgModulePINVOKE.Vec4b_Lt(swigCPtr, Vec4b.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(sbyte x, sbyte y, sbyte z, sbyte w) {
    OsgModulePINVOKE.Vec4b_set__SWIG_0(swigCPtr, x, y, z, w);
  }

  public sbyte x() {
    sbyte ret = OsgModulePINVOKE.Vec4b_x(swigCPtr);
    return ret;
  }

  public sbyte y() {
    sbyte ret = OsgModulePINVOKE.Vec4b_y(swigCPtr);
    return ret;
  }

  public sbyte z() {
    sbyte ret = OsgModulePINVOKE.Vec4b_z(swigCPtr);
    return ret;
  }

  public sbyte w() {
    sbyte ret = OsgModulePINVOKE.Vec4b_w(swigCPtr);
    return ret;
  }

  public sbyte r() {
    sbyte ret = OsgModulePINVOKE.Vec4b_r(swigCPtr);
    return ret;
  }

  public sbyte g() {
    sbyte ret = OsgModulePINVOKE.Vec4b_g(swigCPtr);
    return ret;
  }

  public sbyte b() {
    sbyte ret = OsgModulePINVOKE.Vec4b_b(swigCPtr);
    return ret;
  }

  public sbyte a() {
    sbyte ret = OsgModulePINVOKE.Vec4b_a(swigCPtr);
    return ret;
  }

  public Vec4b Mul(float rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_Mul(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4b MulAssign(float rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4b Div(float rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4b DivAssign(float rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4b Sum(Vec4b rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_Sum(swigCPtr, Vec4b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4b SumAssign(Vec4b rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_SumAssign(swigCPtr, Vec4b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4b Sub(Vec4b rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_Sub(swigCPtr, Vec4b.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4b SubAssign(Vec4b rhs) {
    Vec4b ret = new Vec4b(OsgModulePINVOKE.Vec4b_SubAssign(swigCPtr, Vec4b.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public sbyte get(int i) {
    sbyte ret = OsgModulePINVOKE.Vec4b_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, sbyte value) {
    OsgModulePINVOKE.Vec4b_set__SWIG_1(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec4b_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec2s : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec2s(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec2s obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec2s() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec2s(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec2s() : this(OsgModulePINVOKE.new_Vec2s__SWIG_0(), true) {
  }

  public Vec2s(short x, short y) : this(OsgModulePINVOKE.new_Vec2s__SWIG_1(x, y), true) {
  }

  public bool Eq(Vec2s v) {
    bool ret = OsgModulePINVOKE.Vec2s_Eq(swigCPtr, Vec2s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec2s v) {
    bool ret = OsgModulePINVOKE.Vec2s_NotEq(swigCPtr, Vec2s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec2s v) {
    bool ret = OsgModulePINVOKE.Vec2s_Lt(swigCPtr, Vec2s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(short x, short y) {
    OsgModulePINVOKE.Vec2s_set__SWIG_0(swigCPtr, x, y);
  }

  public void set(Vec2s rhs) {
    OsgModulePINVOKE.Vec2s_set__SWIG_1(swigCPtr, Vec2s.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public short x() {
    short ret = OsgModulePINVOKE.Vec2s_x(swigCPtr);
    return ret;
  }

  public short y() {
    short ret = OsgModulePINVOKE.Vec2s_y(swigCPtr);
    return ret;
  }

  public short r() {
    short ret = OsgModulePINVOKE.Vec2s_r(swigCPtr);
    return ret;
  }

  public short g() {
    short ret = OsgModulePINVOKE.Vec2s_g(swigCPtr);
    return ret;
  }

  public Vec2s Mul(short rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Mul__SWIG_0(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2s MulAssign(short rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2s Div(short rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2s DivAssign(short rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2s Mul(Vec2s rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Mul__SWIG_1(swigCPtr, Vec2s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2s Sum(Vec2s rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Sum(swigCPtr, Vec2s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2s SumAssign(Vec2s rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_SumAssign(swigCPtr, Vec2s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2s Sub(Vec2s rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Sub__SWIG_0(swigCPtr, Vec2s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2s SubAssign(Vec2s rhs) {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_SubAssign(swigCPtr, Vec2s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2s Sub() {
    Vec2s ret = new Vec2s(OsgModulePINVOKE.Vec2s_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public short get(int i) {
    short ret = OsgModulePINVOKE.Vec2s_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, short value) {
    OsgModulePINVOKE.Vec2s_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec2s_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec3s : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec3s(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec3s obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec3s() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec3s(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec3s() : this(OsgModulePINVOKE.new_Vec3s__SWIG_0(), true) {
  }

  public Vec3s(short r, short g, short b) : this(OsgModulePINVOKE.new_Vec3s__SWIG_1(r, g, b), true) {
  }

  public bool Eq(Vec3s v) {
    bool ret = OsgModulePINVOKE.Vec3s_Eq(swigCPtr, Vec3s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec3s v) {
    bool ret = OsgModulePINVOKE.Vec3s_NotEq(swigCPtr, Vec3s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec3s v) {
    bool ret = OsgModulePINVOKE.Vec3s_Lt(swigCPtr, Vec3s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(short r, short g, short b) {
    OsgModulePINVOKE.Vec3s_set__SWIG_0(swigCPtr, r, g, b);
  }

  public void set(Vec3s rhs) {
    OsgModulePINVOKE.Vec3s_set__SWIG_1(swigCPtr, Vec3s.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public short x() {
    short ret = OsgModulePINVOKE.Vec3s_x(swigCPtr);
    return ret;
  }

  public short y() {
    short ret = OsgModulePINVOKE.Vec3s_y(swigCPtr);
    return ret;
  }

  public short z() {
    short ret = OsgModulePINVOKE.Vec3s_z(swigCPtr);
    return ret;
  }

  public short r() {
    short ret = OsgModulePINVOKE.Vec3s_r(swigCPtr);
    return ret;
  }

  public short g() {
    short ret = OsgModulePINVOKE.Vec3s_g(swigCPtr);
    return ret;
  }

  public short b() {
    short ret = OsgModulePINVOKE.Vec3s_b(swigCPtr);
    return ret;
  }

  public Vec3s Mul(short rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Mul__SWIG_0(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3s MulAssign(short rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3s Div(short rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3s DivAssign(short rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3s Mul(Vec3s rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Mul__SWIG_1(swigCPtr, Vec3s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3s Sum(Vec3s rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Sum(swigCPtr, Vec3s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3s SumAssign(Vec3s rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_SumAssign(swigCPtr, Vec3s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3s Sub(Vec3s rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Sub__SWIG_0(swigCPtr, Vec3s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3s SubAssign(Vec3s rhs) {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_SubAssign(swigCPtr, Vec3s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3s Sub() {
    Vec3s ret = new Vec3s(OsgModulePINVOKE.Vec3s_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public short get(int i) {
    short ret = OsgModulePINVOKE.Vec3s_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, short value) {
    OsgModulePINVOKE.Vec3s_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec3s_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec4s : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec4s(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec4s obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec4s() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec4s(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec4s() : this(OsgModulePINVOKE.new_Vec4s__SWIG_0(), true) {
  }

  public Vec4s(short x, short y, short z, short w) : this(OsgModulePINVOKE.new_Vec4s__SWIG_1(x, y, z, w), true) {
  }

  public bool Eq(Vec4s v) {
    bool ret = OsgModulePINVOKE.Vec4s_Eq(swigCPtr, Vec4s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec4s v) {
    bool ret = OsgModulePINVOKE.Vec4s_NotEq(swigCPtr, Vec4s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec4s v) {
    bool ret = OsgModulePINVOKE.Vec4s_Lt(swigCPtr, Vec4s.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(short x, short y, short z, short w) {
    OsgModulePINVOKE.Vec4s_set__SWIG_0(swigCPtr, x, y, z, w);
  }

  public short x() {
    short ret = OsgModulePINVOKE.Vec4s_x(swigCPtr);
    return ret;
  }

  public short y() {
    short ret = OsgModulePINVOKE.Vec4s_y(swigCPtr);
    return ret;
  }

  public short z() {
    short ret = OsgModulePINVOKE.Vec4s_z(swigCPtr);
    return ret;
  }

  public short w() {
    short ret = OsgModulePINVOKE.Vec4s_w(swigCPtr);
    return ret;
  }

  public short r() {
    short ret = OsgModulePINVOKE.Vec4s_r(swigCPtr);
    return ret;
  }

  public short g() {
    short ret = OsgModulePINVOKE.Vec4s_g(swigCPtr);
    return ret;
  }

  public short b() {
    short ret = OsgModulePINVOKE.Vec4s_b(swigCPtr);
    return ret;
  }

  public short a() {
    short ret = OsgModulePINVOKE.Vec4s_a(swigCPtr);
    return ret;
  }

  public Vec4s Mul(short rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Mul__SWIG_0(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4s MulAssign(short rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4s Div(short rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4s DivAssign(short rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4s Mul(Vec4s rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Mul__SWIG_1(swigCPtr, Vec4s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4s Sum(Vec4s rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Sum(swigCPtr, Vec4s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4s SumAssign(Vec4s rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_SumAssign(swigCPtr, Vec4s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4s Sub(Vec4s rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Sub__SWIG_0(swigCPtr, Vec4s.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4s SubAssign(Vec4s rhs) {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_SubAssign(swigCPtr, Vec4s.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4s Sub() {
    Vec4s ret = new Vec4s(OsgModulePINVOKE.Vec4s_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public short get(int i) {
    short ret = OsgModulePINVOKE.Vec4s_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, short value) {
    OsgModulePINVOKE.Vec4s_set__SWIG_1(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec4s_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec2f : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec2f(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec2f obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec2f() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec2f(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec2f() : this(OsgModulePINVOKE.new_Vec2f__SWIG_0(), true) {
  }

  public Vec2f(float x, float y) : this(OsgModulePINVOKE.new_Vec2f__SWIG_1(x, y), true) {
  }

  public bool Eq(Vec2f v) {
    bool ret = OsgModulePINVOKE.Vec2f_Eq(swigCPtr, Vec2f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec2f v) {
    bool ret = OsgModulePINVOKE.Vec2f_NotEq(swigCPtr, Vec2f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec2f v) {
    bool ret = OsgModulePINVOKE.Vec2f_Lt(swigCPtr, Vec2f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(float x, float y) {
    OsgModulePINVOKE.Vec2f_set__SWIG_0(swigCPtr, x, y);
  }

  public void set(Vec2f rhs) {
    OsgModulePINVOKE.Vec2f_set__SWIG_1(swigCPtr, Vec2f.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public float x() {
    float ret = OsgModulePINVOKE.Vec2f_x(swigCPtr);
    return ret;
  }

  public float y() {
    float ret = OsgModulePINVOKE.Vec2f_y(swigCPtr);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.Vec2f_valid(swigCPtr);
    return ret;
  }

  public bool isNaN() {
    bool ret = OsgModulePINVOKE.Vec2f_isNaN(swigCPtr);
    return ret;
  }

  public float Mul(Vec2f rhs) {
    float ret = OsgModulePINVOKE.Vec2f_Mul__SWIG_0(swigCPtr, Vec2f.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2f Mul(float rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_Mul__SWIG_1(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2f MulAssign(float rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2f Div(float rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec2f DivAssign(float rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec2f Sum(Vec2f rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_Sum(swigCPtr, Vec2f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2f SumAssign(Vec2f rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_SumAssign(swigCPtr, Vec2f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2f Sub(Vec2f rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_Sub__SWIG_0(swigCPtr, Vec2f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2f SubAssign(Vec2f rhs) {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_SubAssign(swigCPtr, Vec2f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec2f Sub() {
    Vec2f ret = new Vec2f(OsgModulePINVOKE.Vec2f_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public float length() {
    float ret = OsgModulePINVOKE.Vec2f_length(swigCPtr);
    return ret;
  }

  public float length2() {
    float ret = OsgModulePINVOKE.Vec2f_length2(swigCPtr);
    return ret;
  }

  public float normalize() {
    float ret = OsgModulePINVOKE.Vec2f_normalize(swigCPtr);
    return ret;
  }

  public float get(int i) {
    float ret = OsgModulePINVOKE.Vec2f_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, float value) {
    OsgModulePINVOKE.Vec2f_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec2f_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec3f : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec3f(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec3f obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec3f() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec3f(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec3f() : this(OsgModulePINVOKE.new_Vec3f__SWIG_0(), true) {
  }

  public Vec3f(float x, float y, float z) : this(OsgModulePINVOKE.new_Vec3f__SWIG_1(x, y, z), true) {
  }

  public Vec3f(Vec2f v2, float zz) : this(OsgModulePINVOKE.new_Vec3f__SWIG_2(Vec2f.getCPtr(v2), zz), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Eq(Vec3f v) {
    bool ret = OsgModulePINVOKE.Vec3f_Eq(swigCPtr, Vec3f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec3f v) {
    bool ret = OsgModulePINVOKE.Vec3f_NotEq(swigCPtr, Vec3f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec3f v) {
    bool ret = OsgModulePINVOKE.Vec3f_Lt(swigCPtr, Vec3f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(float x, float y, float z) {
    OsgModulePINVOKE.Vec3f_set__SWIG_0(swigCPtr, x, y, z);
  }

  public void set(Vec3f rhs) {
    OsgModulePINVOKE.Vec3f_set__SWIG_1(swigCPtr, Vec3f.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public float x() {
    float ret = OsgModulePINVOKE.Vec3f_x(swigCPtr);
    return ret;
  }

  public float y() {
    float ret = OsgModulePINVOKE.Vec3f_y(swigCPtr);
    return ret;
  }

  public float z() {
    float ret = OsgModulePINVOKE.Vec3f_z(swigCPtr);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.Vec3f_valid(swigCPtr);
    return ret;
  }

  public bool isNaN() {
    bool ret = OsgModulePINVOKE.Vec3f_isNaN(swigCPtr);
    return ret;
  }

  public float Mul(Vec3f rhs) {
    float ret = OsgModulePINVOKE.Vec3f_Mul__SWIG_0(swigCPtr, Vec3f.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f Cross(Vec3f rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Cross(swigCPtr, Vec3f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f Mul(float rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Mul__SWIG_1(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3f MulAssign(float rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3f Div(float rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec3f DivAssign(float rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec3f Sum(Vec3f rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Sum(swigCPtr, Vec3f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f SumAssign(Vec3f rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_SumAssign(swigCPtr, Vec3f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f Sub(Vec3f rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Sub__SWIG_0(swigCPtr, Vec3f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f SubAssign(Vec3f rhs) {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_SubAssign(swigCPtr, Vec3f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec3f Sub() {
    Vec3f ret = new Vec3f(OsgModulePINVOKE.Vec3f_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public float length() {
    float ret = OsgModulePINVOKE.Vec3f_length(swigCPtr);
    return ret;
  }

  public float length2() {
    float ret = OsgModulePINVOKE.Vec3f_length2(swigCPtr);
    return ret;
  }

  public float normalize() {
    float ret = OsgModulePINVOKE.Vec3f_normalize(swigCPtr);
    return ret;
  }

  public float get(int i) {
    float ret = OsgModulePINVOKE.Vec3f_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, float value) {
    OsgModulePINVOKE.Vec3f_set__SWIG_2(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec3f_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec4f : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec4f(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec4f obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec4f() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec4f(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec4f() : this(OsgModulePINVOKE.new_Vec4f__SWIG_0(), true) {
  }

  public Vec4f(float x, float y, float z, float w) : this(OsgModulePINVOKE.new_Vec4f__SWIG_1(x, y, z, w), true) {
  }

  public Vec4f(Vec3f v3, float w) : this(OsgModulePINVOKE.new_Vec4f__SWIG_2(Vec3f.getCPtr(v3), w), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Eq(Vec4f v) {
    bool ret = OsgModulePINVOKE.Vec4f_Eq(swigCPtr, Vec4f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec4f v) {
    bool ret = OsgModulePINVOKE.Vec4f_NotEq(swigCPtr, Vec4f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Lt(Vec4f v) {
    bool ret = OsgModulePINVOKE.Vec4f_Lt(swigCPtr, Vec4f.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set(float x, float y, float z, float w) {
    OsgModulePINVOKE.Vec4f_set__SWIG_0(swigCPtr, x, y, z, w);
  }

  public float x() {
    float ret = OsgModulePINVOKE.Vec4f_x(swigCPtr);
    return ret;
  }

  public float y() {
    float ret = OsgModulePINVOKE.Vec4f_y(swigCPtr);
    return ret;
  }

  public float z() {
    float ret = OsgModulePINVOKE.Vec4f_z(swigCPtr);
    return ret;
  }

  public float w() {
    float ret = OsgModulePINVOKE.Vec4f_w(swigCPtr);
    return ret;
  }

  public float r() {
    float ret = OsgModulePINVOKE.Vec4f_r(swigCPtr);
    return ret;
  }

  public float g() {
    float ret = OsgModulePINVOKE.Vec4f_g(swigCPtr);
    return ret;
  }

  public float b() {
    float ret = OsgModulePINVOKE.Vec4f_b(swigCPtr);
    return ret;
  }

  public float a() {
    float ret = OsgModulePINVOKE.Vec4f_a(swigCPtr);
    return ret;
  }

  public uint asABGR() {
    uint ret = OsgModulePINVOKE.Vec4f_asABGR(swigCPtr);
    return ret;
  }

  public uint asRGBA() {
    uint ret = OsgModulePINVOKE.Vec4f_asRGBA(swigCPtr);
    return ret;
  }

  public bool valid() {
    bool ret = OsgModulePINVOKE.Vec4f_valid(swigCPtr);
    return ret;
  }

  public bool isNaN() {
    bool ret = OsgModulePINVOKE.Vec4f_isNaN(swigCPtr);
    return ret;
  }

  public float Mul(Vec4f rhs) {
    float ret = OsgModulePINVOKE.Vec4f_Mul__SWIG_0(swigCPtr, Vec4f.getCPtr(rhs));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4f Mul(float rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_Mul__SWIG_1(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4f MulAssign(float rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4f Div(float rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_Div(swigCPtr, rhs), true);
    return ret;
  }

  public Vec4f DivAssign(float rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_DivAssign(swigCPtr, rhs), false);
    return ret;
  }

  public Vec4f Sum(Vec4f rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_Sum(swigCPtr, Vec4f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4f SumAssign(Vec4f rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_SumAssign(swigCPtr, Vec4f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4f Sub(Vec4f rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_Sub__SWIG_0(swigCPtr, Vec4f.getCPtr(rhs)), true);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4f SubAssign(Vec4f rhs) {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_SubAssign(swigCPtr, Vec4f.getCPtr(rhs)), false);
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vec4f Sub() {
    Vec4f ret = new Vec4f(OsgModulePINVOKE.Vec4f_Sub__SWIG_1(swigCPtr), true);
    return ret;
  }

  public float length() {
    float ret = OsgModulePINVOKE.Vec4f_length(swigCPtr);
    return ret;
  }

  public float length2() {
    float ret = OsgModulePINVOKE.Vec4f_length2(swigCPtr);
    return ret;
  }

  public float normalize() {
    float ret = OsgModulePINVOKE.Vec4f_normalize(swigCPtr);
    return ret;
  }

  public float get(int i) {
    float ret = OsgModulePINVOKE.Vec4f_get(swigCPtr, i);
    return ret;
  }

  public void set(int i, float value) {
    OsgModulePINVOKE.Vec4f_set__SWIG_1(swigCPtr, i, value);
  }

  public static readonly int num_components = OsgModulePINVOKE.Vec4f_num_components_get();

}

}
namespace osg {

// %typemap(csimports) SWIGTYPE
using OpenThreads;

public partial class Vec2d : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public Vec2d(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(Vec2d obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vec2d() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OsgModulePINVOKE.delete_Vec2d(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Vec2d() : this(OsgModulePINVOKE.new_Vec2d__SWIG_0(), true) {
  }

  public Vec2d(double x, double y) : this(OsgModulePINVOKE.new_Vec2d__SWIG_1(x, y), true) {
  }

  public Vec2d(Vec2f vec) : this(OsgModulePINVOKE.new_Vec2d__SWIG_2(Vec2f.getCPtr(vec)), true) {
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Eq(Vec2d v) {
    bool ret = OsgModulePINVOKE.Vec2d_Eq(swigCPtr, Vec2d.getCPtr(v));
    if (OsgModulePINVOKE.SWIGPendingException.Pending) throw OsgModulePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NotEq(Vec2d v) {
    bool ret = OsgModulePINVOKE.Vec2d_